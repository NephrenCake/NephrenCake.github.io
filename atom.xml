<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅幽丶奈芙莲的个人博客</title>
  
  <subtitle>NephrenCake Blog</subtitle>
  <link href="https://nephrencake.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://nephrencake.gitee.io/"/>
  <updated>2021-06-28T12:30:10.162Z</updated>
  <id>https://nephrencake.gitee.io/</id>
  
  <author>
    <name>NephrenCake</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django-Part6</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part6/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part6/</id>
    <published>2021-06-18T10:43:53.000Z</published>
    <updated>2021-06-28T12:30:10.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part6——"><a href="#Django-Part6——" class="headerlink" title="Django-Part6——"></a>Django-Part6——</h1><p>[TOC]</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul><li>异步提交</li><li>局部刷新</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例子:github注册</span></span><br><span class="line"><span class="string">动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">朝发送请求的方式</span></span><br><span class="line"><span class="string">1.浏览器地址栏直接输入url回车   GET请求</span></span><br><span class="line"><span class="string">2.a标签href属性    GET请求</span></span><br><span class="line"><span class="string">3.form表单 GET请求/POST请求</span></span><br><span class="line"><span class="string">4.ajaxGET请求/POST请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 不是新的编程语言，而是一种使用现有标准的新方法(比较装饰器)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ajax我们只学习jQuery封装之后的版本(不学原生的 原生的复杂并且在实际项目中也一般不用)</span></span><br><span class="line"><span class="string">所以我们在前端页面使用ajax的时候需要确保导入了jQuery</span></span><br><span class="line"><span class="string">ps:并不只有jQuery能够实现ajax，其他的框架也可以 但是换汤不换药 原理是一样的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            <span class="built_in">type</span>:<span class="string">&#x27;post&#x27;</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;&#x27;username&#x27;:&#x27;jason&#x27;,&#x27;password&#x27;:123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">&#x27;i1&#x27;</span>:$(<span class="string">&#x27;#d1&#x27;</span>).val(),<span class="string">&#x27;i2&#x27;</span>:$(<span class="string">&#x27;#d2&#x27;</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$(&#x27;#d3&#x27;).val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">2.在ajax里面配置一个参数</span></span><br><span class="line"><span class="string">(后面再讲)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    <summary type="html"></summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Part5</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part5/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part5/</id>
    <published>2021-06-18T10:30:40.000Z</published>
    <updated>2021-06-28T12:29:38.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part5——模型层"><a href="#Django-Part5——模型层" class="headerlink" title="Django-Part5——模型层"></a>Django-Part5——模型层</h1><p>[TOC]</p><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><ul><li>当只是想测试django项目中的某一个.py文件内容，那么可以不用书写前后端交互的形式，而是直接写一个测试脚本即可。</li><li>脚本代码无论是写在应用下的tests.py，还是单独开设.py文件都可以。</li><li>django中的文件默认不会暴露出来，需要准备测试环境才能进行测试。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试环境的准备：1. 在manage.py中拷贝前四行代码；2. 额外增加两行代码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;djangoProject.settings&quot;</span>)  <span class="comment"># 这里要改成相应的项目名</span></span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 测试代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>当<code>from app01 import models</code>写在main之外时，可以通过勾选”使用Python控制台运行”来解决 <a href="https://blog.csdn.net/weixin_44393803/article/details/89739066">https://blog.csdn.net/weixin_44393803/article/details/89739066</a></p></li><li><p>当不准备环境配置时，可以使用 Python控制台启动 。这样会忽略脚本中的配置环境代码。</p></li></ul><h2 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h2><ul><li>django自带的sqlite3数据库对日期格式不是很敏感，处理的时候容易出错。</li><li>pk会自动查找到当前表的主键字段，指代的就是当前表的主键字段，避免区分当前表的主键字段名uid/pid/sid</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; test.py</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 增 1</span></span><br><span class="line">    res = models.User.objects.create(name=<span class="string">&#x27;jason&#x27;</span>, age=<span class="number">18</span>, register_time=<span class="string">&#x27;2002-1-21&#x27;</span>)</span><br><span class="line">    print(res)  <span class="comment"># User object (1)</span></span><br><span class="line">    <span class="comment"># 增 2</span></span><br><span class="line">    user_obj = models.User(name=<span class="string">&#x27;egon&#x27;</span>, age=<span class="number">84</span>, register_time=datetime.datetime.now())</span><br><span class="line">    user_obj.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删 1</span></span><br><span class="line">    res = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">2</span>).delete()</span><br><span class="line">    print(res)  <span class="comment"># (1, &#123;&#x27;app01.User&#x27;: 1&#125;)</span></span><br><span class="line">    <span class="comment"># 删 2</span></span><br><span class="line">    user_obj = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    user_obj.delete()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 改 1</span></span><br><span class="line">    models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">4</span>).update(name=<span class="string">&#x27;egonDSB&#x27;</span>)</span><br><span class="line"><span class="comment"># 改 2</span></span><br><span class="line">    user_obj = models.User.objects.get(pk=<span class="number">4</span>)  <span class="comment"># 直接拿到pk=4的数据对象，避免filter+索引</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get方法直接拿到pk=4的数据对象，避免filter+索引，但是该方法不推荐使用：</span></span><br><span class="line"><span class="string">    一旦数据不存在该方法会直接报错，而filter则不会。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    user_obj = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">6</span>).first()</span><br><span class="line">    user_obj.name = <span class="string">&#x27;egonPPP&#x27;</span></span><br><span class="line">    user_obj.save()</span><br></pre></td></tr></table></figure><h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><ol><li><p>all()：查询所有数据</p></li><li><p>filter()：带有过滤条件的查询</p></li><li><p>get()：直接拿数据对象，但是条件不存在直接报错</p></li><li><p>first()：拿queryset里面第一个元素</p></li><li><p>last()：拿queryset里面最后一个元素</p></li><li><p>values()：可以指定获取的数据字段，相当于select name,age from …     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = models.User.objects.values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">print(res)  <span class="comment"># 列表套字典 &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;, &#123;&#x27;name&#x27;: &#x27;egonPPP&#x27;, &#x27;age&#x27;: 84&#125;]&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>values_list()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = models.User.objects.values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">print(res)  <span class="comment"># 列表套元组 &lt;QuerySet [(&#x27;jason&#x27;, 18), (&#x27;egonPPP&#x27;, 84)]&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>distinct()：去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = models.User.objects.values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>).distinct()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><ul><li><p>去重一定要是一模一样的数据。</p><p>例如：.all()的数据带有主键，因此无法去重</p></li></ul></li><li><p>order_by()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = models.User.objects.order_by(<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 默认升序</span></span><br><span class="line">res = models.User.objects.order_by(<span class="string">&#x27;-age&#x27;</span>)  <span class="comment"># 降序</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></li><li><p>reverse()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    res = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    res1 = models.User.objects.order_by(<span class="string">&#x27;age&#x27;</span>).reverse()</span><br><span class="line">    print(res,res1)</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> count()：统计当前数据的个数</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    res = models.User.objects.count()</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> exclude()：排除在外</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    res = models.User.objects.exclude(name=<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure></li><li><p>exists()：基本用不到因为数据本身就自带布尔值  返回的是布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">10</span>).exists()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3></li><li><p>QuerySet类对象可以使用.query查看内部封装的sql语句</p></li><li><p>在配置文件中配置logging，查看所有的sql语句</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">print(res.query)  <span class="comment"># SELECT `app01_user`.`name`, `app01_user`.`age` FROM `app01_user`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双下划线查询"><a href="#双下划线查询" class="headerlink" title="双下划线查询"></a>双下划线查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 神奇的双下划线查询</span></span><br><span class="line">    <span class="comment"># 1 年龄大于35岁的数据</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__gt=35)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 2 年龄小于35岁的数据</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__lt=35)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 大于等于 小于等于</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__gte=32)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__lte=32)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年龄是18 或者 32 或者40</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__in=[18,32,40])</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年龄在18到40岁之间的  首尾都要</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(age__range=[18,40])</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询出名字里面含有s的数据  模糊查询</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(name__contains=&#x27;s&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 是否区分大小写  查询出名字里面含有p的数据  区分大小写</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(name__contains=&#x27;p&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 忽略大小写</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(name__icontains=&#x27;p&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(name__startswith=&#x27;j&#x27;)</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.filter(name__endswith=&#x27;j&#x27;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询出注册时间是 2020 1月</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(register_time__month=&#x27;1&#x27;)</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(register_time__year=&#x27;2020&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一对多外键增删改查</span></span><br><span class="line">    <span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title=&#x27;论语&#x27;,price=899.23,publish_id=1)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title=&#x27;聊斋&#x27;,price=444.23,publish_id=2)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title=&#x27;老子&#x27;,price=333.66,publish_id=1)</span></span><br><span class="line">    <span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title=&#x27;红楼梦&#x27;,price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure><h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    remove</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    set</span></span><br><span class="line"><span class="string">        括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    <span class="comment"># 在第三张关系表中清空某个书籍与作者的绑定关系</span></span><br><span class="line">    book_obj.authors.clear()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    clear</span></span><br><span class="line"><span class="string">        括号内不要加任何参数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">外键字段在我手上那么，我查你就是正向</span><br><span class="line">  外键字段如果不在手上，我查你就是反向</span><br><span class="line">  </span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  </span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正向查询按字段</span></span><br><span class="line"><span class="string">反向查询按表名小写</span></span><br><span class="line"><span class="string">_set</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在书写orm语句的时候跟写sql语句一样的</span></span><br><span class="line"><span class="string">    不要企图一次性将orm语句写完 如果比较复杂 就写一点看一点</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name=&#x27;东方出版社&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name=&#x27;jason&#x27;).first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基于对象 </span></span><br><span class="line"><span class="string">        反向查询的时候</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">        自己总结出 自己方便记忆的即可 每个人都可以不一样</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询    # 1.查询jason的手机号和作者姓名    # res = models.Author.objects.filter(name=&#x27;jason&#x27;).values(&#x27;author_detail__phone&#x27;,&#x27;name&#x27;)    # print(res)    # 反向    # res = models.AuthorDetail.objects.filter(author__name=&#x27;jason&#x27;)  # 拿作者姓名是jason的作者详情    # res = models.AuthorDetail.objects.filter(author__name=&#x27;jason&#x27;).values(&#x27;phone&#x27;,&#x27;author__name&#x27;)    # print(res)    # 2.查询书籍主键为1的出版社名称和书的名称    # res = models.Book.objects.filter(pk=1).values(&#x27;title&#x27;,&#x27;publish__name&#x27;)    # print(res)    # 反向    # res = models.Publish.objects.filter(book__id=1).values(&#x27;name&#x27;,&#x27;book__title&#x27;)    # print(res)    # 3.查询书籍主键为1的作者姓名    # res = models.Book.objects.filter(pk=1).values(&#x27;authors__name&#x27;)    # print(res)    # 反向    # res = models.Author.objects.filter(book__id=1).values(&#x27;name&#x27;)    # print(res)    # 查询书籍主键是1的作者的手机号    # book author authordetail    # res = models.Book.objects.filter(pk=1).values(&#x27;authors__author_detail__phone&#x27;)    # print(res)    &quot;&quot;&quot;    你只要掌握了正反向的概念    以及双下划线    那么你就可以无限制的跨表        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate    &quot;&quot;&quot;    聚合查询通常情况下都是配合分组一起使用的    只要是跟数据库相关的模块         基本上都在django.db.models里面        如果上述没有那么应该在django.db里面    &quot;&quot;&quot;    from app01 import models    from django.db.models import Max,Min,Sum,Count,Avg    # 1 所有书的平均价格    # res = models.Book.objects.aggregate(Avg(&#x27;price&#x27;))    # print(res)    # 2.上述方法一次性使用    res = models.Book.objects.aggregate(Max(&#x27;price&#x27;),Min(&#x27;price&#x27;),Sum(&#x27;price&#x27;),Count(&#x27;pk&#x27;),Avg(&#x27;price&#x27;))    print(res)</span></span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate    &quot;&quot;&quot;    MySQL分组查询都有哪些特点        分组之后默认只能获取到分组的依据 组内其他字段都无法直接获取了            严格模式                ONLY_FULL_GROUP_BY                    &quot;&quot;&quot;    from django.db.models import Max, Min, Sum, Count, Avg    # 1.统计每一本书的作者个数    # res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组    # res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)    &quot;&quot;&quot;    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数    &quot;&quot;&quot;    # res1 = models.Book.objects.annotate(author_num=Count(&#x27;authors__id&#x27;)).values(&#x27;title&#x27;,&#x27;author_num&#x27;)    # print(res,res1)    &quot;&quot;&quot;    代码没有补全 不要怕 正常写    补全给你是pycharm给你的 到后面在服务器上直接书写代码 什么补全都没有 颜色提示也没有        &quot;&quot;&quot;    # 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)    # res = models.Publish.objects.annotate(min_price=Min(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;min_price&#x27;)    # print(res)    # 3.统计不止一个作者的图书        # 1.先按照图书分组 求每一本书对应的作者个数        # 2.过滤出不止一个作者的图书    # res = models.Book.objects.annotate(author_num=Count(&#x27;authors&#x27;)).filter(author_num__gt=1).values(&#x27;title&#x27;,&#x27;author_num&#x27;)    # &quot;&quot;&quot;    # 只要你的orm语句得出的结果还是一个queryset对象    # 那么它就可以继续无限制的点queryset对象封装的方法    #    # &quot;&quot;&quot;    # print(res)    # 4.查询每个作者出的书的总价格    # res = models.Author.objects.annotate(sum_price=Sum(&#x27;book__price&#x27;)).values(&#x27;name&#x27;,&#x27;sum_price&#x27;)    # print(res)    &quot;&quot;&quot;    如果我想按照指定的字段分组该如何处理呢？        models.Book.objects.values(&#x27;price&#x27;).annotate()    后续BBS作业会使用            你们的机器上如果出现分组查询报错的情况        你需要修改数据库严格模式    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># F查询    # 1.查询卖出数大于库存数的书籍    # F查询    &quot;&quot;&quot;    能够帮助你直接获取到表中某个字段对应的数据    &quot;&quot;&quot;    from django.db.models import F    # res = models.Book.objects.filter(maichu__gt=F(&#x27;kucun&#x27;))    # print(res)    # 2.将所有书籍的价格提升500块    # models.Book.objects.update(price=F(&#x27;price&#x27;) + 500)    # 3.将所有书的名称后面加上爆款两个字    &quot;&quot;&quot;    在操作字符类型的数据的时候 F不能够直接做到字符串的拼接    &quot;&quot;&quot;    from django.db.models.functions import Concat    from django.db.models import Value    models.Book.objects.update(title=Concat(F(&#x27;title&#x27;), Value(&#x27;爆款&#x27;)))    # models.Book.objects.update(title=F(&#x27;title&#x27;) + &#x27;爆款&#x27;)  # 所有的名称会全部变成空白</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q查询    # 1.查询卖出数大于100或者价格小于600的书籍    # res = models.Book.objects.filter(maichu__gt=100,price__lt=600)    &quot;&quot;&quot;filter括号内多个参数是and关系&quot;&quot;&quot;    from django.db.models import Q    # res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系    # res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系    # res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系    # print(res)  # &lt;QuerySet []&gt;    # Q的高阶用法  能够将查询条件的左边也变成字符串的形式    q = Q()    q.connector = &#x27;or&#x27;    q.children.append((&#x27;maichu__gt&#x27;,100))    q.children.append((&#x27;price__lt&#x27;,600))    res = models.Book.objects.filter(q)  # 默认还是and关系    print(res)</span></span><br></pre></td></tr></table></figure><h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;事务ACID原子性不可分割的最小单位一致性跟原子性是相辅相成隔离性事务之间互相不干扰持久性事务一旦确认永久生效事务的回滚 rollback事务的确认commit&quot;&quot;&quot;</span><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务# 事务    from django.db import transaction    try:        with transaction.atomic():            # sql1            # sql2            ...            # 在with代码快内书写的所有orm操作都是属于同一个事务    except Exception as e:        print(e)    print(&#x27;执行其他操作&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AutoField主键字段 primary_key=<span class="literal">True</span>  CharFieldvarcharverbose_name字段的注释  max_length长度  IntegerFieldintBigIntegerFieldbigintDecimalFieldmax_digits=<span class="number">8</span>  decimal_places=2EmailFiledvarchar(<span class="number">254</span>)DateFielddateDateTimeFielddatetimeauto_now:每次修改数据的时候都会自动更新当前时间  auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了    BooleanField(Field)- 布尔值类型该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 数据库里面存<span class="number">0</span>/1TextField(Field)- 文本类型该字段可以用来存大段内容(文章、博客...)  没有字数限制  后面的bbs作业 文章字段用的就是TextFieldFileField(Field)- 字符类型   upload_to = <span class="string">&quot;/data&quot;</span>  给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中  /data/a.txt  后面bbs作业也会涉及<span class="comment"># 更多字段直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/9203990.html    # django除了给你提供了很多字段类型之外 还支持你自定义字段class MyCharField(models.Field):    def __init__(self,max_length,*args,**kwargs):        self.max_length = max_length        # 调用父类的init方法        super().__init__(max_length=max_length,*args,**kwargs)  # 一定要是关键字的形式传入    def db_type(self, connection):        &quot;&quot;&quot;        返回真正的数据类型及各种约束条件        :param connection:        :return:        &quot;&quot;&quot;        return &#x27;char(%s)&#x27;%self.max_length# 自定义字段使用myfield = MyCharField(max_length=16,null=True)# 外键字段及参数unique=TrueForeignKey(unique=True)   ===OneToOneField()  # 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用  db_index如果db_index=True 则代表着为此字段设置索引  (复习索引是什么)to_field设置要关联的表的字段  默认不写关联的就是另外一张的主键字段on_delete当删除关联表中的数据时，当前表与其关联的行的行为。  &quot;&quot;&quot;  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">only与deferselect_related与prefetch_related<span class="string">&quot;&quot;&quot;orm语句的特点:惰性查询如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数那么orm会自动识别 直接不执行&quot;&quot;&quot;</span><span class="comment"># only与defer# res = models.Book.objects.all()    # print(res)  # 要用数据了才会走数据库    # 想要获取书籍表中所有数的名字    # res = models.Book.objects.values(&#x27;title&#x27;)    # for d in res:    #     print(d.get(&#x27;title&#x27;))    # 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段    # res = models.Book.objects.only(&#x27;title&#x27;)    # res = models.Book.objects.all()    # print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;    # for i in res:        # print(i.title)  # 点击only括号内的字段 不会走数据库        # print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了    res = models.Book.objects.defer(&#x27;title&#x27;)  # 对象除了没有title属性之外其他的都有    for i in res:        print(i.price)    &quot;&quot;&quot;    defer与only刚好相反        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据        而如果查询的是非括号内的字段 则不需要走数据库了    &quot;&quot;&quot;    # select_related与prefetch_related# select_related与prefetch_related  跟跨表操作有关    # res = models.Book.objects.all()    # for i in res:    #     print(i.publish.name)  # 每循环一次就要走一次数据库查询    # res = models.Book.objects.select_related(&#x27;authors&#x27;)  # INNER JOIN    &quot;&quot;&quot;    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据    全部封装给查询出来的对象        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了        select_related括号内只能放外键字段    一对多 一对一        多对多也不行        &quot;&quot;&quot;    # for i in res:    #     print(i.publish.name)  # 每循环一次就要走一次数据库查询    res = models.Book.objects.prefetch_related(&#x27;publish&#x27;)  # 子查询    &quot;&quot;&quot;    prefetch_related该方法内部其实就是子查询        将子查询查询出来的所有结果也给你封装到对象中        给你的感觉好像也是一次性搞定的    &quot;&quot;&quot;    for i in res:        print(i.publish.name)</span></span><br></pre></td></tr></table></figure><h3 id="图书管理的图书增删改查"><a href="#图书管理的图书增删改查" class="headerlink" title="图书管理的图书增删改查"></a>图书管理的图书增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponsefrom app01 <span class="keyword">import</span> models<span class="comment"># Create your views here.def home(request):    return render(request,&#x27;home.html&#x27;)def book_list(request):    # 先查询出所有的书籍信息 传递给html页面    book_queryset = models.Book.objects.all()    return render(request,&#x27;book_list.html&#x27;,locals())def book_add(request):    if request.method == &#x27;POST&#x27;:        # 获取前端提交过来的所有数据        title = request.POST.get(&quot;title&quot;)        price = request.POST.get(&quot;price&quot;)        publish_date = request.POST.get(&quot;publish_date&quot;)        publish_id = request.POST.get(&quot;publish&quot;)        authors_list = request.POST.getlist(&quot;authors&quot;)  # [1,2,3,4,]        # 操作数据库存储数据        # 书籍表        book_obj = models.Book.objects.create(title=title,price=price,publish_date=publish_date,publish_id=publish_id)        # 书籍与作者的关系表        book_obj.authors.add(*authors_list)        # 跳转到书籍的展示页面        &quot;&quot;&quot;        redirect括号内可以直接写url        其实也可以直接写别名                但是如果你的别名需要额外给参数的话，那么就必须使用reverse解析了        &quot;&quot;&quot;        return redirect(&#x27;book_list&#x27;)    # 先获取当前系统中所有的出版社信息和作者信息    publish_queryset = models.Publish.objects.all()    author_queryset = models.Author.objects.all()    return render(request,&#x27;book_add.html&#x27;,locals())def book_edit(request,edit_id):    # 获取当前用户想要编辑的书籍对象 展示给用户看    edit_obj = models.Book.objects.filter(pk=edit_id).first()    if request.method == &#x27;POST&#x27;:        title = request.POST.get(&quot;title&quot;)        price = request.POST.get(&quot;price&quot;)        publish_date = request.POST.get(&quot;publish_date&quot;)        publish_id = request.POST.get(&quot;publish&quot;)        authors_list = request.POST.getlist(&quot;authors&quot;)  # [1,2,3,4,]        models.Book.objects.filter(pk=edit_id).update(title=title,                                                      price=price,                                                      publish_date=publish_date,                                                      publish_id=publish_id                                                      )        # 该第三张关系表        edit_obj.authors.set(authors_list)        return redirect(&#x27;book_list&#x27;)    publish_queryset = models.Publish.objects.all()    author_queryset = models.Author.objects.all()    return render(request,&#x27;book_edit.html&#x27;,locals())def book_delete(request,delete_id):    # 简单粗暴 直接删除    models.Book.objects.filter(pk=delete_id).delete()    # 直接跳转到展示页    return redirect(&#x27;book_list&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;用户表性别学历工作经验是否结婚是否生子客户来源...针对某个可以列举完全的可能性字段，我们应该如何存储只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数&quot;&quot;&quot;</span><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span>    username = models.CharField(max_length=<span class="number">32</span>)    age = models.IntegerField()    <span class="comment"># 性别    gender_choices = (        (1,&#x27;男&#x27;),        (2,&#x27;女&#x27;),        (3,&#x27;其他&#x27;),    )    gender = models.IntegerField(choices=gender_choices)        score_choices = (        (&#x27;A&#x27;,&#x27;优秀&#x27;),        (&#x27;B&#x27;,&#x27;良好&#x27;),        (&#x27;C&#x27;,&#x27;及格&#x27;),        (&#x27;D&#x27;,&#x27;不合格&#x27;),    )    # 保证字段类型跟列举出来的元祖第一个数据类型一致即可    score = models.CharField(choices=score_choices,null=True)    &quot;&quot;&quot;    该gender字段存的还是数字 但是如果存的数字在上面元祖列举的范围之内    那么可以非常轻松的获取到数字对应的真正的内容        1.gender字段存的数字不在上述元祖列举的范围内容    2.如果在 如何获取对应的中文信息    &quot;&quot;&quot;              from app01 import models    # models.User.objects.create(username=&#x27;jason&#x27;,age=18,gender=1)    # models.User.objects.create(username=&#x27;egon&#x27;,age=85,gender=2)    # models.User.objects.create(username=&#x27;tank&#x27;,age=40,gender=3)    # 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）    # models.User.objects.create(username=&#x27;tony&#x27;,age=45,gender=4)    # 取    # user_obj = models.User.objects.filter(pk=1).first()    # print(user_obj.gender)    # 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()    # print(user_obj.get_gender_display())    user_obj = models.User.objects.filter(pk=4).first()    # 如果没有对应关系 那么字段是什么还是展示什么    print(user_obj.get_gender_display())  # 4     # 实际项目案例# CRM相关内部表class School(models.Model):    &quot;&quot;&quot;    校区表    如：        北京沙河校区        上海校区    &quot;&quot;&quot;    title = models.CharField(verbose_name=&#x27;校区名称&#x27;, max_length=32)    def __str__(self):        return self.titleclass Course(models.Model):    &quot;&quot;&quot;    课程表    如：        Linux基础        Linux架构师        Python自动化开发精英班        Python自动化开发架构师班        Python基础班        go基础班    &quot;&quot;&quot;    name = models.CharField(verbose_name=&#x27;课程名称&#x27;, max_length=32)    def __str__(self):        return self.nameclass Department(models.Model):    &quot;&quot;&quot;    部门表    市场部     1000    销售       1001    &quot;&quot;&quot;    title = models.CharField(verbose_name=&#x27;部门名称&#x27;, max_length=16)    code = models.IntegerField(verbose_name=&#x27;部门编号&#x27;, unique=True, null=False)    def __str__(self):        return self.titleclass UserInfo(models.Model):    &quot;&quot;&quot;    员工表    &quot;&quot;&quot;    name = models.CharField(verbose_name=&#x27;员工姓名&#x27;, max_length=16)    email = models.EmailField(verbose_name=&#x27;邮箱&#x27;, max_length=64)    depart = models.ForeignKey(verbose_name=&#x27;部门&#x27;, to=&quot;Department&quot;,to_field=&quot;code&quot;)    user=models.OneToOneField(&quot;User&quot;,default=1)    def __str__(self):        return self.nameclass ClassList(models.Model):    &quot;&quot;&quot;    班级表    如：        Python全栈  面授班  5期  10000  2017-11-11  2018-5-11    &quot;&quot;&quot;    school = models.ForeignKey(verbose_name=&#x27;校区&#x27;, to=&#x27;School&#x27;)    course = models.ForeignKey(verbose_name=&#x27;课程名称&#x27;, to=&#x27;Course&#x27;)    semester = models.IntegerField(verbose_name=&quot;班级(期)&quot;)    price = models.IntegerField(verbose_name=&quot;学费&quot;)    start_date = models.DateField(verbose_name=&quot;开班日期&quot;)    graduate_date = models.DateField(verbose_name=&quot;结业日期&quot;, null=True, blank=True)    memo = models.CharField(verbose_name=&#x27;说明&#x27;, max_length=256, blank=True, null=True, )    teachers = models.ManyToManyField(verbose_name=&#x27;任课老师&#x27;, to=&#x27;UserInfo&#x27;,limit_choices_to=&#123;&#x27;depart&#x27;:1002&#125;)    tutor = models.ForeignKey(verbose_name=&#x27;班主任&#x27;, to=&#x27;UserInfo&#x27;,related_name=&quot;class_list&quot;,limit_choices_to=&#123;&#x27;depart&#x27;:1006&#125;)    def __str__(self):        return &quot;&#123;0&#125;(&#123;1&#125;期)&quot;.format(self.course.name, self.semester)class Customer(models.Model):    &quot;&quot;&quot;    客户表    &quot;&quot;&quot;    qq = models.CharField(verbose_name=&#x27;qq&#x27;, max_length=64, unique=True, help_text=&#x27;QQ号必须唯一&#x27;)    name = models.CharField(verbose_name=&#x27;学生姓名&#x27;, max_length=16)    gender_choices = ((1, &#x27;男&#x27;), (2, &#x27;女&#x27;))    gender = models.SmallIntegerField(verbose_name=&#x27;性别&#x27;, choices=gender_choices)    education_choices = (        (1, &#x27;重点大学&#x27;),        (2, &#x27;普通本科&#x27;),        (3, &#x27;独立院校&#x27;),        (4, &#x27;民办本科&#x27;),        (5, &#x27;大专&#x27;),        (6, &#x27;民办专科&#x27;),        (7, &#x27;高中&#x27;),        (8, &#x27;其他&#x27;)    )    education = models.IntegerField(verbose_name=&#x27;学历&#x27;, choices=education_choices, blank=True, null=True, )    graduation_school = models.CharField(verbose_name=&#x27;毕业学校&#x27;, max_length=64, blank=True, null=True)    major = models.CharField(verbose_name=&#x27;所学专业&#x27;, max_length=64, blank=True, null=True)    experience_choices = [        (1, &#x27;在校生&#x27;),        (2, &#x27;应届毕业&#x27;),        (3, &#x27;半年以内&#x27;),        (4, &#x27;半年至一年&#x27;),        (5, &#x27;一年至三年&#x27;),        (6, &#x27;三年至五年&#x27;),        (7, &#x27;五年以上&#x27;),    ]    experience = models.IntegerField(verbose_name=&#x27;工作经验&#x27;, blank=True, null=True, choices=experience_choices)    work_status_choices = [        (1, &#x27;在职&#x27;),        (2, &#x27;无业&#x27;)    ]    work_status = models.IntegerField(verbose_name=&quot;职业状态&quot;, choices=work_status_choices, default=1, blank=True,                                      null=True)    company = models.CharField(verbose_name=&quot;目前就职公司&quot;, max_length=64, blank=True, null=True)    salary = models.CharField(verbose_name=&quot;当前薪资&quot;, max_length=64, blank=True, null=True)    source_choices = [        (1, &quot;qq群&quot;),        (2, &quot;内部转介绍&quot;),        (3, &quot;官方网站&quot;),        (4, &quot;百度推广&quot;),        (5, &quot;360推广&quot;),        (6, &quot;搜狗推广&quot;),        (7, &quot;腾讯课堂&quot;),        (8, &quot;广点通&quot;),        (9, &quot;高校宣讲&quot;),        (10, &quot;渠道代理&quot;),        (11, &quot;51cto&quot;),        (12, &quot;智汇推&quot;),        (13, &quot;网盟&quot;),        (14, &quot;DSP&quot;),        (15, &quot;SEO&quot;),        (16, &quot;其它&quot;),    ]    source = models.SmallIntegerField(&#x27;客户来源&#x27;, choices=source_choices, default=1)    referral_from = models.ForeignKey(        &#x27;self&#x27;,        blank=True,        null=True,        verbose_name=&quot;转介绍自学员&quot;,        help_text=&quot;若此客户是转介绍自内部学员,请在此处选择内部学员姓名&quot;,        related_name=&quot;internal_referral&quot;    )    course = models.ManyToManyField(verbose_name=&quot;咨询课程&quot;, to=&quot;Course&quot;)    status_choices = [        (1, &quot;已报名&quot;),        (2, &quot;未报名&quot;)    ]    status = models.IntegerField(        verbose_name=&quot;状态&quot;,        choices=status_choices,        default=2,        help_text=u&quot;选择客户此时的状态&quot;    )    consultant = models.ForeignKey(verbose_name=&quot;课程顾问&quot;, to=&#x27;UserInfo&#x27;, related_name=&#x27;consultanter&#x27;,limit_choices_to=&#123;&#x27;depart&#x27;:1001&#125;)    date = models.DateField(verbose_name=&quot;咨询日期&quot;, auto_now_add=True)    recv_date = models.DateField(verbose_name=&quot;当前课程顾问的接单日期&quot;, null=True)    last_consult_date = models.DateField(verbose_name=&quot;最后跟进日期&quot;, )    def __str__(self):        return self.nameclass ConsultRecord(models.Model):    &quot;&quot;&quot;    客户跟进记录    &quot;&quot;&quot;    customer = models.ForeignKey(verbose_name=&quot;所咨询客户&quot;, to=&#x27;Customer&#x27;)    consultant = models.ForeignKey(verbose_name=&quot;跟踪人&quot;, to=&#x27;UserInfo&#x27;,limit_choices_to=&#123;&#x27;depart&#x27;:1001&#125;)    date = models.DateField(verbose_name=&quot;跟进日期&quot;, auto_now_add=True)    note = models.TextField(verbose_name=&quot;跟进内容...&quot;)    def __str__(self):        return self.customer.name + &quot;:&quot; + self.consultant.nameclass Student(models.Model):    &quot;&quot;&quot;    学生表（已报名）    &quot;&quot;&quot;    customer = models.OneToOneField(verbose_name=&#x27;客户信息&#x27;, to=&#x27;Customer&#x27;)    class_list = models.ManyToManyField(verbose_name=&quot;已报班级&quot;, to=&#x27;ClassList&#x27;, blank=True)    emergency_contract = models.CharField(max_length=32, blank=True, null=True, verbose_name=&#x27;紧急联系人&#x27;)    company = models.CharField(verbose_name=&#x27;公司&#x27;, max_length=128, blank=True, null=True)    location = models.CharField(max_length=64, verbose_name=&#x27;所在区域&#x27;, blank=True, null=True)    position = models.CharField(verbose_name=&#x27;岗位&#x27;, max_length=64, blank=True, null=True)    salary = models.IntegerField(verbose_name=&#x27;薪资&#x27;, blank=True, null=True)    welfare = models.CharField(verbose_name=&#x27;福利&#x27;, max_length=256, blank=True, null=True)    date = models.DateField(verbose_name=&#x27;入职时间&#x27;, help_text=&#x27;格式yyyy-mm-dd&#x27;, blank=True, null=True)    memo = models.CharField(verbose_name=&#x27;备注&#x27;, max_length=256, blank=True, null=True)    def __str__(self):        return self.customer.nameclass ClassStudyRecord(models.Model):    &quot;&quot;&quot;    上课记录表 （班级记录）    &quot;&quot;&quot;    class_obj = models.ForeignKey(verbose_name=&quot;班级&quot;, to=&quot;ClassList&quot;)    day_num = models.IntegerField(verbose_name=&quot;节次&quot;, help_text=u&quot;此处填写第几节课或第几天课程...,必须为数字&quot;)    teacher = models.ForeignKey(verbose_name=&quot;讲师&quot;, to=&#x27;UserInfo&#x27;,limit_choices_to=&#123;&#x27;depart&#x27;:1002&#125;)    date = models.DateField(verbose_name=&quot;上课日期&quot;, auto_now_add=True)    course_title = models.CharField(verbose_name=&#x27;本节课程标题&#x27;, max_length=64, blank=True, null=True)    course_memo = models.TextField(verbose_name=&#x27;本节课程内容概要&#x27;, blank=True, null=True)    has_homework = models.BooleanField(default=True, verbose_name=&quot;本节有作业&quot;)    homework_title = models.CharField(verbose_name=&#x27;本节作业标题&#x27;, max_length=64, blank=True, null=True)    homework_memo = models.TextField(verbose_name=&#x27;作业描述&#x27;, max_length=500, blank=True, null=True)    exam = models.TextField(verbose_name=&#x27;踩分点&#x27;, max_length=300, blank=True, null=True)    def __str__(self):        return &quot;&#123;0&#125; day&#123;1&#125;&quot;.format(self.class_obj, self.day_num)class StudentStudyRecord(models.Model):    &#x27;&#x27;&#x27;    学生学习记录    &#x27;&#x27;&#x27;    classstudyrecord = models.ForeignKey(verbose_name=&quot;第几天课程&quot;, to=&quot;ClassStudyRecord&quot;)    student = models.ForeignKey(verbose_name=&quot;学员&quot;, to=&#x27;Student&#x27;)    record_choices = ((&#x27;checked&#x27;, &quot;已签到&quot;),                      (&#x27;vacate&#x27;, &quot;请假&quot;),                      (&#x27;late&#x27;, &quot;迟到&quot;),                      (&#x27;noshow&#x27;, &quot;缺勤&quot;),                      (&#x27;leave_early&#x27;, &quot;早退&quot;),                      )    record = models.CharField(&quot;上课纪录&quot;, choices=record_choices, default=&quot;checked&quot;, max_length=64)    score_choices = ((100, &#x27;A+&#x27;),                     (90, &#x27;A&#x27;),                     (85, &#x27;B+&#x27;),                     (80, &#x27;B&#x27;),                     (70, &#x27;B-&#x27;),                     (60, &#x27;C+&#x27;),                     (50, &#x27;C&#x27;),                     (40, &#x27;C-&#x27;),                     (0, &#x27; D&#x27;),                     (-1, &#x27;N/A&#x27;),                     (-100, &#x27;COPY&#x27;),                     (-1000, &#x27;FAIL&#x27;),                     )    score = models.IntegerField(&quot;本节成绩&quot;, choices=score_choices, default=-1)    homework_note = models.CharField(verbose_name=&#x27;作业评语&#x27;, max_length=255, blank=True, null=True)    note = models.CharField(verbose_name=&quot;备注&quot;, max_length=255, blank=True, null=True)    homework = models.FileField(verbose_name=&#x27;作业文件&#x27;, blank=True, null=True, default=None)    stu_memo = models.TextField(verbose_name=&#x27;学员备注&#x27;, blank=True, null=True)    date = models.DateTimeField(verbose_name=&#x27;提交作业日期&#x27;, auto_now_add=True)    def __str__(self):        return &quot;&#123;0&#125;-&#123;1&#125;&quot;.format(self.classstudyrecord, self.student)         &quot;&quot;&quot;chocies参数使用场景是非常广泛的&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型M:modelsT:templatesV:views# MVC:其实django本质也是MVCM:modelsV:viewsC:controller  # vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure><h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表class Book(models.Model):    name = models.CharField(max_length=32)    authors = models.ManyToManyField(to=&#x27;Author&#x27;)class Author(models.Model):    name = models.CharField(max_length=32)&quot;&quot;&quot;优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)&quot;&quot;&quot;# 纯手动class Book(models.Model):    name = models.CharField(max_length=32)    class Author(models.Model):    name = models.CharField(max_length=32)    class Book2Author(models.Model):    book_id = models.ForeignKey(to=&#x27;Book&#x27;)    author_id = models.ForeignKey(to=&#x27;Author&#x27;)  &#x27;&#x27;&#x27;  优点:第三张表完全取决于你自己进行额外的扩展  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法  不建议你用该方式  &#x27;&#x27;&#x27;# 半自动class Book(models.Model):    name = models.CharField(max_length=32)    authors = models.ManyToManyField(to=&#x27;Author&#x27;,                                     through=&#x27;Book2Author&#x27;,                                     through_fields=(&#x27;book&#x27;,&#x27;author&#x27;)                                     )class Author(models.Model):    name = models.CharField(max_length=32)    # books = models.ManyToManyField(to=&#x27;Book&#x27;,    #                                  through=&#x27;Book2Author&#x27;,    #                                  through_fields=(&#x27;author&#x27;,&#x27;book&#x27;)    #                                  )class Book2Author(models.Model):    book = models.ForeignKey(to=&#x27;Book&#x27;)    author = models.ForeignKey(to=&#x27;Author&#x27;)&quot;&quot;&quot;through_fields字段先后顺序    判断的本质：        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面    你也可以简化判断        当前表是谁 就把对应的关联字段放前面                半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法&quot;&quot;&quot;# 总结:你需要掌握的是全自动和半自动 为了扩展性更高 一般我们都会采用半自动(写代码要给自己留一条后路)</span></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    <summary type="html">模型层</summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Part4</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part4/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part4/</id>
    <published>2021-06-17T00:59:51.000Z</published>
    <updated>2021-06-28T12:28:57.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part4——视图层"><a href="#Django-Part4——视图层" class="headerlink" title="Django-Part4——视图层"></a>Django-Part4——视图层</h1><p>[TOC]</p>## 三板斧### HttpResponse- HttpResponse：返回字符串类型- render：返回html页面，并且在返回给浏览器之前还可以给html文件传值- redirect：重定向> 视图函数必须要返回一个HttpResponse对象### render简单原理<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">from</span> django.template <span class="keyword">import</span> Template, Context</span><br><span class="line">    res = Template(<span class="string">&#x27;&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;&#x27;</span>)  <span class="comment"># 模板对象</span></span><br><span class="line">    con = Context(&#123;<span class="string">&#x27;user&#x27;</span>: &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="number">123</span>&#125;&#125;)  <span class="comment"># 动态确定模板变量的内容，此处是&#123;&#x27;username&#x27;:&#x27;jason&#x27;, &#x27;password&#x27;:123&#125;</span></span><br><span class="line">    ret = res.render(con)  <span class="comment"># 将模板和动态内容组装</span></span><br><span class="line">    print(ret)  <span class="comment"># &lt;h1&gt;&#123;&amp;#x27;username&amp;#x27;: &amp;#x27;jason&amp;#x27;, &amp;#x27;password&amp;#x27;: 123&#125;&lt;/h1&gt;</span></span><br><span class="line">    print(<span class="built_in">type</span>(ret))  <span class="comment"># &lt;class &#x27;django.utils.safestring.SafeString&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>## JsonResponse对象- 前后端数据交互需要使用json作为过渡，实现跨语言传输数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_json</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_dict = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason好帅哦,我好喜欢!&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;girl&#x27;</span>&#125;</span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># import json  # 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict, ensure_ascii=False)  # 禁止内部转码</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)  # 将该字符串作为参数，返回HttpResponse对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_dict, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错：In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br></pre></td></tr></table></figure>- 指将字典打散成关键字的形式- 默认只能序列化字典，序列化其他需要加safe参数> 很多时候都可以通过读源码来掌握用法## form表单上传文件及后端操作在 .html 中：1. method 必须指定成 post2. enctype 必须换成 multipart/formdata<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        print(request.POST)  <span class="comment"># 只能获取普通的键值对数据，文件不行 &lt;QueryDict: &#123;&#x27;username&#x27;: [&#x27;&#x27;]&#125;&gt;</span></span><br><span class="line">        print(request.FILES)  <span class="comment"># 获取文件数据 &lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: 4101021694766.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        print(file_obj.name)  <span class="comment"># 4101021694766.jpg</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法，两者几乎等效</span></span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br></pre></td></tr></table></figure>## request对象方法- request.method  # 返回请求方式 并且是全大写的字符串形式  <class 'str'>- request.POST  # 获取用户post请求提交的普通数据不包含文件- request.POST.get()  # 只获取列表最后一个元素- request.POST.getlist()  # 直接将列表取出- request.GET  # 获取用户提交的get请求数据- request.GET.get()  # 只获取列表最后一个元素- request.GET.getlist()  # 直接将列表取出- request.FILES - request.body  # 发过来的原生二进制数据- request.path - request.path_info  # 和request.path是等效的- request.get_full_path()  能过获取完整的url及问号后面的参数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">print(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">print(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure>## FBV与CBV视图函数既可以是 函数 FBV（function base views），也可以是 类 CBV（class base views）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FBV</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"><span class="comment"># FBV路由</span></span><br><span class="line">path(<span class="string">&quot;login/&quot;</span>, views.login)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span>(<span class="params">View</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">&#x27;form.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line"><span class="comment"># CBV路由</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br></pre></td></tr></table></figure>### CBV源码剖析- 首先，不建议自己修改源码- 函数名/方法名，加括号执行优先级最高，例如views.MyLogin.as_view()会立刻执行as_view()方法- CBV与FBV在路由匹配上本质是一样的，都是路由对应函数内存地址。- 在没有实例的情况下使用函数，则只可能使用@staicmethod或者@classmethod- 在看python源码的时候，一定要时刻提醒自己面向对象属性方法查找顺序：  - 先从对象自己找  - 再去产生对象的类里面找  - 之后再去父类找  -  ...- 反射 getattr()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.MyLogin.as_view())</span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>,views.view)</span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的，都是路由对应函数内存地址</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测：</span></span><br><span class="line"><span class="string">    as_view()</span></span><br><span class="line"><span class="string">        要么是被@staicmethod修饰的静态方法</span></span><br><span class="line"><span class="string">        要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span>(<span class="params">cls, **initkwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类   MyCBV</span></span><br><span class="line"><span class="string">        Main entry point for a request-response process.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            以后你们会经常需要看源码 但是在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找</span></span><br><span class="line"><span class="string">                再去产生对象的类里面找</span></span><br><span class="line"><span class="string">                之后再去父类找</span></span><br><span class="line"><span class="string">                ...</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self点一个东西，一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line"><span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="comment"># post请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">                handler = getattr(自己写的类产生的对象,&#x27;get&#x27;,当找不到get属性或者方法的时候就会用第三个参数)</span></span><br><span class="line"><span class="string">                handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment"># 调用get方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求掌握到不看源码也能够描述出CBV的内部执行流程</span></span><br></pre></td></tr></table></figure>## 模版语法###  传值- {{ }}:变量相关- {% %}：逻辑相关- 传递函数名会自动加括号调用，但是模版语法不支持给函数传额外的参数- 传类名的时候也会自动加括号调用(实例化)- 内部将自动判断出当前的变量名是否可以加括号调用，如果可以就会自动执行。针对的是函数名和类名，不针对对象的call方法。- 对象被展示到html页面上，就类似于执行了打印操作也会触发str方法- django模版语法的取值只能采用句点符`.`，即可以点键也可以点索引，也可以两者混用。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">&#x27;我也想奔现&#x27;</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;姗姗&#x27;</span>, <span class="string">&#x27;花花&#x27;</span>, <span class="string">&#x27;茹茹&#x27;</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>, <span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;这个人有点意思&#x27;</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">&#x27;晶晶&#x27;</span>, <span class="string">&#x27;洋洋&#x27;</span>, <span class="string">&#x27;嘤嘤&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;我被执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;你的另一半在等你&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_self</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;self&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_func</span>():</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_class</span>(<span class="params">cls</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cls&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上，就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;到底会不会？&#x27;</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,&#x27;index.html&#x27;,&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># -&gt; .html</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; f &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; s &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; l &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; d &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; t &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; se &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; func &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; MyClass &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.get_self &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.get_func &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.get_class &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; d.username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; l.0 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; d.hobby.3.info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>### 过滤器- 过滤器就类似于是模版语法的内置方法- 基本语法：{{数据|过滤器:参数}}- 过滤器只能最多有两个参数- 在全栈项目的时候，前端代码不一定非要在前端页面书写，也可以现在先在后端写好，然后传递给前端页面。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>统计长度:&#123;&#123; s|length &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>默认值(True则展示|前的值, False则展示default值):&#123;&#123; b|default:&#x27;啥也不是&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>日期格式化:&#123;&#123; current_time|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>切片操作(支持步长):&#123;&#123; l|slice:&#x27;0:4:2&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>切取字符(包含三个点):&#123;&#123; info|truncatechars:9 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>切取词段(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:9 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>切取词段(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:9 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>移除特定的字符:&#123;&#123; msg|cut:&#x27; &#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>拼接操作:&#123;&#123; l|join:&#x27;$&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>拼接操作(加法):&#123;&#123; n|add:10 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转义:&#123;&#123; hhh|safe &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转义:&#123;&#123; sss|safe &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转义:&#123;&#123; res &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">&#x27;我也想奔现&#x27;</span></span><br><span class="line">    b = <span class="literal">False</span></span><br><span class="line">    l = [<span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;姗姗&#x27;</span>, <span class="string">&#x27;花花&#x27;</span>, <span class="string">&#x27;茹茹&#x27;</span>, <span class="string">&#x27;敏敏&#x27;</span>, <span class="string">&#x27;新新&#x27;</span>]</span><br><span class="line">    t = (<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;info&#x27;</span>: <span class="string">&#x27;这个人有点意思&#x27;</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, &#123;<span class="string">&#x27;info&#x27;</span>: <span class="string">&#x27;NB&#x27;</span>&#125;]&#125;</span><br><span class="line">    se = &#123;<span class="string">&#x27;晶晶&#x27;</span>, <span class="string">&#x27;洋洋&#x27;</span>, <span class="string">&#x27;嘤嘤&#x27;</span>&#125;</span><br><span class="line">    lll = []</span><br><span class="line">    file_size = <span class="number">123123112</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    current_time = datetime.datetime.now()</span><br><span class="line">    info = <span class="string">&#x27;本 文 始 发 于 个 人 公 众 号： ...&#x27;</span></span><br><span class="line">    egl = <span class="string">&#x27;my name is jason my age is 18 and i am from China&#x27;</span></span><br><span class="line">    msg = <span class="string">&#x27;I Love You And You?&#x27;</span></span><br><span class="line">    hhh = <span class="string">&#x27;&lt;h1&gt;敏敏&lt;/h1&gt;&#x27;</span></span><br><span class="line">    sss = <span class="string">&#x27;&lt;script&gt;alert(123)&lt;/script&gt;&#x27;</span></span><br><span class="line">    <span class="comment"># 后端转义字符串</span></span><br><span class="line">    <span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">    res = mark_safe(<span class="string">&#x27;&lt;h1&gt;新新&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, <span class="built_in">locals</span>())  <span class="comment"># 返回所有变量的命名空间</span></span><br></pre></td></tr></table></figure>### 标签- 使用Tab键快速补全#### for循环<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;#for循环#&#125;</span><br><span class="line">&#123;% for foo in l %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;#  &#123;&#x27;parentloop&#x27;: &#123;&#125;, &#x27;counter0&#x27;: 0, &#x27;counter&#x27;: 1, &#x27;revcounter&#x27;: 6, &#x27;revcounter0&#x27;: 5, &#x27;first&#x27;: True, &#x27;last&#x27;: False&#125;#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>#### if判断<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;#if判断#&#125;</span><br><span class="line">&#123;% if b %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>baby<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif s %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>都来把<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>老baby<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>#### for与if混合使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;#for与if混合使用#&#125;</span><br><span class="line">&#123;% for foo in lll %&#125;</span><br><span class="line">&#123;% if forloop.first %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif forloop.last %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是最后一次啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>for循环的可迭代对象内部没有元素，根本没法循环<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>#### 处理字典其他方法<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;#处理字典其他方法#&#125;</span><br><span class="line">&#123;% for foo in d.keys %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% for foo in d.values %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% for foo in d.items %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>#### with起别名<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;#with起别名#&#125;</span><br><span class="line">&#123;% with d.hobby.3.info as nb %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; nb &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; d.hobby.3.info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>### 自定义过滤器、标签、inclusion_tag1. 在应用下创建一个名字**必须**叫 templatetags 文件夹2. 在该文件夹内创建**任意**名称的py文件 eg: mytag.py3. 在该py文件内**必须**先书写下面两行代码   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 自定义过滤器(参数只能两个)</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;baby&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用 </span></span><br><span class="line">&#123;% load mytag %&#125;  <span class="comment"># 只需要load一次！</span></span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:666 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 自定义标签(参数可以有多个)，类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(<span class="params">name=<span class="string">&#x27;plus&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">a,b,c,d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%s-%s-%s-%s&#x27;</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用，标签多个参数彼此之间空格隔开</span></span><br><span class="line">&lt;p&gt;&#123;% plus &#x27;jason&#x27; 123 123 123 %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 自定义inclusion_tag</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">内部原理</span></span><br><span class="line"><span class="string">先定义一个方法 </span></span><br><span class="line"><span class="string">在页面上调用该方法，并且可以传值</span></span><br><span class="line"><span class="string">该方法会生成一些数据然后传递给一个指定的html页面</span></span><br><span class="line"><span class="string">之后将渲染好的结果放到调用的位置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;left_menu.html&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span>(<span class="params">n</span>):</span></span><br><span class="line">    data = [<span class="string">&#x27;第&#123;&#125;项&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;&#x27;data&#x27;:data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br></pre></td></tr></table></figure>> 当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式。例如：bbs### 模版的继承- 有些网站不同url的页面整体类似，只是某一些局部在做变化。例如：导航栏不变，主干部分在变化。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先设计好父类模版页面</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;home.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在父类模板中划定可以被修改的区域</span></span><br><span class="line">&#123;% block name %&#125;</span><br><span class="line">模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在子页面声明想要修改的区域内容</span></span><br><span class="line">&#123;% block name %&#125;</span><br><span class="line">子页面内容</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>- 一般情况下模版页面上应该至少有三块可以被修改的区域，每一个子页面都有独有的css代码、html代码、js代码。  1. css区域  2. html区域  3. js区域<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block css %&#125;</span><br><span class="line">css</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">html</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">js</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>### 模版的导入将一个局部内容做成模块的形式，在需要的地方直接导入。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include <span class="string">&#x27;wasai.html&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure></class>]]></content>
    
    
    <summary type="html">视图层</summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Part3</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part3/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part3/</id>
    <published>2021-06-15T14:52:22.000Z</published>
    <updated>2021-06-28T12:28:28.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part3——路由层"><a href="#Django-Part3——路由层" class="headerlink" title="Django-Part3——路由层"></a>Django-Part3——路由层</h1><p>[TOC]</p><h2 id="Django请求生命周期流程图-重点"><a href="#Django请求生命周期流程图-重点" class="headerlink" title="Django请求生命周期流程图(重点)"></a>Django请求生命周期流程图(重点)</h2><ul><li>wsgiref模块能够支持的并发量很小，上线之后换成uwsgi</li><li>wsgi、wsgiref、uwsgi之间的关系<ul><li>wsgi是协议</li><li>wsgiref和uwsgi是实现该协议的功能模块</li></ul></li></ul><p><img src="/2021/06/Django-Part3/202011130830231.png" alt="202011130830231.png"></p><h2 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h2><h3 id="path-re-path-与url"><a href="#path-re-path-与url" class="headerlink" title="path()/re_path()与url()"></a>path()/re_path()与url()</h3><ul><li>匹配顺序从上到下，只要能够匹配到内容，那么就会立刻停止往下匹配。</li><li>2.x之后的<code>re_path()</code>与1.x的<code>url()</code>是等价的，推荐使用新版本的方法，方法名更加容易辨别意思。</li><li><code>re_path()</code>的第一个参数是正则表达式，一旦匹配到了，则进入响应的视图函数并停止匹配。</li><li><code>path()</code>的第一个参数是路径，只有完全匹配时才会执行对应的视图函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">r&#x27;test/&#x27;</span>, views.test),</span><br><span class="line">    path(<span class="string">r&#x27;testadd/&#x27;</span>, views.testadd)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^$&#x27;</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^test/$&#x27;</span>,views.test),  <span class="comment"># 和path(r&#x27;test/&#x27;, views.test)等效</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^testadd/$&#x27;</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(但这种写法失去了重定向)</span></span><br><span class="line">    re_path(<span class="string">r&#x27;&#x27;</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在访问url时会以输入的原url进行一次匹配。当匹配失败时，会在原url上添加后缀<code>/</code>，再次进行一次匹配。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消自动加斜杠，默认为True</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><ul><li>无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line">re_path(<span class="string">r&#x27;^test/(\d+)/&#x27;</span>, views.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request, xx</span>):</span></span><br><span class="line">    print(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><ul><li>有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</li><li>需要有一个对应的形参来接收</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line">re_path(<span class="string">r&#x27;^testadd/(?P&lt;year&gt;\d+)&#x27;</span>, views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testadd</span>(<span class="params">request, year</span>):</span></span><br><span class="line">    print(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;testadd&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><ul><li>不能混用无名、有名分组</li><li>但是只使用一种分组时可以使用多次/传多个形参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line">re_path(<span class="string">r&#x27;^index/(\d+)/(\d+)/(\d+)/&#x27;</span>, views.index),</span><br><span class="line">re_path(<span class="string">r&#x27;^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/&#x27;</span>, views.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testadd</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    print(args, kwargs)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;testadd&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><ul><li>通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line"><span class="comment"># 给路由与视图函数起一个别名</span></span><br><span class="line">re_path(<span class="string">r&#x27;^urls/&#x27;</span>, views.func, name=<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="comment"># 后端反向解析</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line">reverse(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; xxx.html</span></span><br><span class="line"><span class="comment"># 前端反向解析</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;name&#x27; %&#125;&quot;&gt;string&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="无名分组反向解析"><a href="#无名分组反向解析" class="headerlink" title="无名分组反向解析"></a>无名分组反向解析</h3><blockquote><p>分组的解析值一般就是数据的主键值。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line">re_path(<span class="string">r&#x27;^edit/(\d+)/&#x27;</span>, views.edit, name=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">request, edit_id</span>):</span></span><br><span class="line">    reverse(<span class="string">&#x27;xxx&#x27;</span>, args=(edit_id, ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; xxx.html   </span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;xxx&#x27; user_obj.id %&#125;&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="有名分组反向解析"><a href="#有名分组反向解析" class="headerlink" title="有名分组反向解析"></a>有名分组反向解析</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">re_path(<span class="string">r&#x27;^func/(?P&lt;year&gt;\d+)/&#x27;</span>, views.func, name=<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">print(reverse(<span class="string">&#x27;ooo&#x27;</span>, kwargs=&#123;<span class="string">&#x27;year&#x27;</span>:<span class="number">123</span>&#125;))</span><br><span class="line"><span class="comment"># 简便的写法，和无名一样</span></span><br><span class="line">print(reverse(<span class="string">&#x27;ooo&#x27;</span>, args=(<span class="number">111</span>,)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; xxx.html   </span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;ooo&#x27; year=123 %&#125;&quot;&gt;111&lt;/a&gt;  # 了解</span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;ooo&#x27; 123 %&#125;&quot;&gt;222&lt;/a&gt;  # 记忆</span><br></pre></td></tr></table></figure><h3 id="如何理解分组反向解析"><a href="#如何理解分组反向解析" class="headerlink" title="如何理解分组反向解析"></a>如何理解分组反向解析</h3><ul><li>分组是基于正则表达式匹配url，即不同的url能够进入相同的视图函数，多存在于 <code>https://xxx/id/</code> 类似，这部分会在id不同时发生变化。</li><li>反向解析基于别名，在.html和.py中动态获得 <code>https://xxx/id/</code> 的xxx部分，这部分可能会在重构url地址时发生变化。</li><li>分组反向解析则是通过上述两条结合，动态地获得 <code>https://xxx/id/</code> 这条有很多种可能的url，以方便进入相应的视图函数。</li><li>分组的解析值一般就是数据的主键值，相当于是在视图函数中增加形参，来代替在request中获取的部分数据。</li></ul><h2 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h2><h3 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h3><ul><li>django的每一个应用都可以有自己的templates、urls.py、static（需要自己新建）。这样能够很好地做到分组开发，最终利用路由分发进行整合。</li><li>当django项目中的url特别多的时候，总路由urls.py代码非常冗余不好维护，这时也可以利用路由分发来减轻总路由的压力。</li><li>使用路由分发之后，总路由不再将url与视图函数直接对应，而是识别分类当前url所属应用，并分发给对应的应用去处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, re_path</span><br><span class="line"><span class="comment"># from app01 import urls as app01_urls</span></span><br><span class="line"><span class="comment"># from app02 import urls as app02_urls</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 路由分发</span></span><br><span class="line">    <span class="comment"># url(r&#x27;^app01/&#x27;, include(app01_urls)),  # 只要url前缀是app01开头，全部交给app01处理</span></span><br><span class="line">    <span class="comment"># url(r&#x27;^app02/&#x27;, include(app02_urls))   # 只要url前缀是app02开头，全部交给app02处理</span></span><br><span class="line">    <span class="comment"># 推荐写法</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>))</span><br><span class="line">    <span class="comment"># 注意事项: 总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line"><span class="comment"># -&gt; app01 -&gt; urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; app02 -&gt; urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, re_path</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><ul><li>当多个应用出现了相同的别名，反向解析只能识别后缀而不能识别前缀，例如 <code>https://app/xxx/</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总路由 </span></span><br><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>, namespace=<span class="string">&#x27;app01&#x27;</span>))，</span><br><span class="line">re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>, namespace=<span class="string">&#x27;app02&#x27;</span>))</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line"><span class="comment"># -&gt; app01 -&gt; urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg, name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># -&gt; app02 -&gt; urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg, name=<span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line">reverse(<span class="string">&#x27;app01:reg&#x27;</span>)</span><br><span class="line">reverse(<span class="string">&#x27;app02:reg&#x27;</span>)</span><br><span class="line"><span class="comment"># -&gt; .html</span></span><br><span class="line">&#123;% url <span class="string">&#x27;app01:reg&#x27;</span> %&#125;</span><br><span class="line">&#123;% url <span class="string">&#x27;app02:reg&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><ul><li>利用名称空间可以区分不同app的相同别名，但一般只需要在别名之前添加所属应用作为前缀，就大可不必使用名称空间。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg, name=<span class="string">&#x27;app01_reg&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^reg/&#x27;</span>, views.reg, name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h2><ul><li>静态网页：数据是写死的 万年不变</li><li>伪静态：将一个动态网页伪装成静态网页</li><li>伪装的目的：<ul><li>增大本网站的seo查询力度</li><li>增加搜索引擎收藏本网上的概率</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅将url地址改为.html结尾，假装只是返回html文件，实际上还是经过视图函数，可以做动态处理</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^reg.html&#x27;</span>, views.reg, name=<span class="string">&#x27;app02_reg&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><ul><li>在正常开发中，通常每一个项目配备一个独有的解释器环境，只有该项目用到的模块，用不到一概不装。</li><li>但是较多的虚拟环境会消耗更多的硬盘空间。</li><li>一般通过requirement.txt来标识项目的虚拟环境需要的模块。</li></ul><h2 id="path-转换器"><a href="#path-转换器" class="headerlink" title="path()转换器"></a>path()转换器</h2><ol><li>str：匹配除了路径分隔符<code>/</code>之外的非空字符串，这是默认的形式</li><li>int：匹配正整数，包含0。</li><li>slug：匹配字母、数字以及横杠、下划线组成的字符串。</li><li>uuid：匹配格式化的uuid，如：075194d3-6885-417e-a8a8-6c931e272f00。</li><li>path：匹配任何非空字符串，包含了路径分隔符（/）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line"><span class="comment"># 将匹配内容转成相应类型，作为形参传递给后面的视图函数</span></span><br><span class="line">path(<span class="string">&#x27;index/&lt;int:id&gt;/&#x27;</span>, index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request,<span class="built_in">id</span></span>):</span></span><br><span class="line">    print(<span class="built_in">id</span>, <span class="built_in">type</span>(<span class="built_in">id</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>自定义转换器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; path_converts.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonthConverter</span>:</span></span><br><span class="line">    regex=<span class="string">&#x27;\d&#123;2&#125;&#x27;</span>  <span class="comment"># 属性名必须为regex</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> value  <span class="comment"># 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, register_converter</span><br><span class="line"><span class="keyword">from</span> path_converts <span class="keyword">import</span> MonthConverter</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先注册转换器</span></span><br><span class="line">register_converter(MonthConverter, <span class="string">&#x27;mon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail, name=<span class="string">&#x27;aaa&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">路由层</summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Part?</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part?/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part?/</id>
    <published>2021-06-13T01:57:59.000Z</published>
    <updated>2021-06-21T11:12:48.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="——"><a href="#——" class="headerlink" title="——"></a>——</h1><p>[TOC]</p><p><code>django-admin startproject mysite</code></p><p><a href>wwwwwww</a></p><h2 id><a href="#" class="headerlink" title="_"></a>_</h2><p>p22</p><ol><li>TCP 2. 三次握手==四次==握手 3. ois七层降五层 4. ip 以太网 arp协议</li></ol><ol><li>页面设计：怎做一个好看的页面，组件的悬浮</li><li></li></ol><p><a href="http://127.0.0.1:8000/api/">http://127.0.0.1:8000/api/</a></p><ol><li><p>登录 login </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;user_pk&#x27;</span>: user_pk  <span class="comment"># -1拒绝登录，&gt;0登录成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>user_info</p></li><li><p>user_edit</p></li><li><p>hospital</p></li><li><p>vaccine</p></li><li><p>order</p></li><li><p>history</p></li></ol>]]></content>
    
    
    <summary type="html"></summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Django-Part2</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part2/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part2/</id>
    <published>2021-06-13T01:53:22.000Z</published>
    <updated>2021-06-28T12:27:55.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part2——文件与数据"><a href="#Django-Part2——文件与数据" class="headerlink" title="Django-Part2——文件与数据"></a>Django-Part2——文件与数据</h1><p>[TOC]</p><h2 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h2><h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><ul><li>将html文件默认都放在 Templates文件夹下</li></ul><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><ul><li>将网站所使用的静态文件放在Static文件夹下</li></ul><p>这里的静态文件指前端已经写好了的，能够直接调用的文件。</p><p>包括 js、css、.jpg、第三方前端框架等。</p><blockquote><p>Django不会自动创建static文件夹 需要手动创建</p></blockquote><h3 id="访问静态文件"><a href="#访问静态文件" class="headerlink" title="访问静态文件"></a>访问静态文件</h3><blockquote><p>如果访问不到资源，则一定说明后端没有开设该资源的接口。</p></blockquote><p>在写django项目的时候，可能会出现后端代码修改了，但是前端页面没有变化的情况。那么可能原因有：</p><ol><li><p>在同一个端口开了好几个django项目，而一直在跑的其实是第一个django项目</p></li><li><p>浏览器缓存的问题。勾选 settings -&gt; network -&gt; disable cache </p></li></ol><h3 id="静态文件访问令牌"><a href="#静态文件访问令牌" class="headerlink" title="静态文件访问令牌"></a>静态文件访问令牌</h3><p>想要调用静态文件，则文件地址必须以 令牌(<code>STATIC_URL</code>) + 文件名 形式。</p><p>然后将在 <code>STATICFILES_DIRS</code> 注册的文件夹列表中从上往下依次<strong>非递归</strong>查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; settings.py</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 访问静态文件的令牌</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要自己创建STATICFILES_DIRS，配置静态文件所在文件夹</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static1&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同时也可以动态解析令牌</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;% static &#x27;bootstrap-3.3.7-dist/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;script src=&quot;&#123;% static &#x27;bootstrap-3.3.7-dist/js/bootstrap.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在前期使用django提交post请求时，需要在settings中注释掉一行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; settings.py</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,  # 表示django全局发送post请求均需要字符串验证</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h2><ul><li>request.method  # 返回请求方式 并且是全大写的字符串形式  &lt;class ‘str’&gt;</li><li>request.POST  # 获取用户post请求提交的普通数据不包含文件</li><li>request.POST.get()  # 只获取列表最后一个元素</li><li>request.POST.getlist()  # 直接将列表取出</li><li>request.GET  # 获取用户提交的get请求数据</li><li>request.GET.get()  # 只获取列表最后一个元素</li><li>request.GET.getlist()  # 直接将列表取出</li></ul><p><code>get</code>请求携带的数据是有大小限制的，而<code>post</code>请求则没有限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 视图函数必须要接受一个形参request</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了 宝贝&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><ul><li>对于<code>get</code>请求和<code>post</code>请求应该有不同的处理机制</li><li>对<code>post</code>做特殊处理，而将<code>request</code>放置在<code>if</code>围绕之外，提高可阅读性</li></ul></blockquote><h2 id="数据库链接"><a href="#数据库链接" class="headerlink" title="数据库链接"></a>数据库链接</h2><h3 id="Pycharm链接数据库"><a href="#Pycharm链接数据库" class="headerlink" title="Pycharm链接数据库"></a>Pycharm链接数据库</h3><ul><li>需要提前创建好对应使用的mysql数据库文件</li><li>pycharm右侧上方database</li></ul><h3 id="Django链接数据库"><a href="#Django链接数据库" class="headerlink" title="Django链接数据库"></a>Django链接数据库</h3><ol><li>Django默认使用sqlite3，首先改settings</li><li>Django默认使用mysqldb，需要改为pymysql</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; settings.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;day60&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;admin123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; 在项目名下或任意应用名下的init文件</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h2><h3 id="更快捷的Django命令"><a href="#更快捷的Django命令" class="headerlink" title="更快捷的Django命令"></a>更快捷的Django命令</h3><ul><li>这里的命令将拥有代码提示</li></ul><p><img src="/2021/06/Django-Part2/image-20210615221710342.png" alt="image-20210615221710342"></p><h3 id="创建模型表"><a href="#创建模型表" class="headerlink" title="创建模型表"></a>创建模型表</h3><ul><li>对象关系映射（ORM），能够以面向对象的方式简便快捷地操作数据库。但是封装程度太高，有时候还是需要自己写SQL语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; app -&gt; models.py</span></span><br><span class="line"><span class="comment"># 1. 首先在models.py中书写一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;主键&#x27;</span>)  <span class="comment"># verbose_name用来对字段解释</span></span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;用户名&#x27;</span>)  <span class="comment"># CharField必须要指定max_length参数，否则报错</span></span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段，并且一般情况下都叫id字段</span></span><br><span class="line">    <span class="comment"># 所以当不定义主键字段时，orm会自动创建一个名为id主键字段</span></span><br><span class="line">    <span class="comment"># 也就意味着：后续在创建表时，如果主键字段名没有额外的叫法，那么主键字段可以省略不写</span></span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>每次只要修改了models.py中跟数据库相关的代码，就必须重新执行以下两条命令。</li><li>如果发现执行之后没有发生变化，则检查app是否已经注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; 控制台</span></span><br><span class="line"><span class="comment"># 2. 数据库迁移命令</span></span><br><span class="line">python manage.py makemigrations  <span class="comment"># 将操作记录记录migrations文件夹中</span></span><br><span class="line">python manage.py migrate  <span class="comment"># 将操作真正的同步到数据库中</span></span><br></pre></td></tr></table></figure><ul><li>除自建表之外，还有Django需要使用的表</li></ul><p><img src="/2021/06/Django-Part2/image-20210616153539184.png" alt="image-20210616153539184"></p><h3 id="字段的增删改"><a href="#字段的增删改" class="headerlink" title="字段的增删改"></a>字段的增删改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul><li>当数据表拥有记录时，不能增加非空字段：<ol><li>在终端内直接给出默认值</li><li>退出终端程序，并修改代码为可以为空<code>xxx = models.CharField(max_length=32, null=True)</code></li><li>退出终端程序，并修改代码设置默认值<code>xxx = models.CharField(max_length=32, default=&#39;xxx&#39;)</code></li></ol></li></ul><h4 id="删-改"><a href="#删-改" class="headerlink" title="删/改"></a>删/改</h4><ul><li>修改、删除字段则是修改、注释/删除对应代码</li></ul><p>此时model文件已修改，因此不要忘了执行数据库迁移的两条命令</p><blockquote><p>不要轻易地删除/注释字段，删除也最好使用软删除！</p><p>在对于数据库操作时一定要注意隐私安全，一定要锁屏！</p></blockquote><h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><ul><li>在视图函数中，<code>from app01 import models</code>首先导入对应的app下的model</li></ul><h4 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">        <span class="comment"># 第一种方式(推荐使用)</span></span><br><span class="line">reslt = models.User.objects.create(username=username, password=password)  </span><br><span class="line">        print(res,res.username, res.password)  <span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二种方式</span></span><br><span class="line">user_obj = models.User(username=username, password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 先给用户返回一个注册页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;reg.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取用户的用户名和密码 然后利用orm操作数据 校验数据是否正确</span></span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 去数据库中查询数据</span></span><br><span class="line">        <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">        <span class="comment"># select * from user where username=&#x27;jason&#x27;;</span></span><br><span class="line">        <span class="comment"># filter相当于where，括号内可以携带多个参数，参数与参数之间是and关系</span></span><br><span class="line">        result = models.User.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line">        print(<span class="built_in">type</span>(result))  <span class="comment"># &lt;QuerySet [&lt;User: User object&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 支持索引取值、切片操作，但是不支持负数索引</span></span><br><span class="line">user_obj = reslt.first()  <span class="comment"># 从queryset拿出一个个数据对象</span></span><br><span class="line">print(user_obj.username)  <span class="comment"># 直接调用字段</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比对密码是否一致</span></span><br><span class="line">        <span class="keyword">if</span> user_obj:</span><br><span class="line">            <span class="keyword">if</span> password == user_obj.password:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;用户不存在&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>models.User.objects.filter()</code>等效于<code>models.User.objects.all()</code></li><li><code>.first()</code>等效于<code>[0]</code></li></ul><p>数据展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userlist</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># return render(request,&#x27;userlist.html&#x27;,&#123;&#x27;user_queryset&#x27;:user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;userlist.html&#x27;</span>,<span class="built_in">locals</span>())  <span class="comment"># 返回当前的命名空间</span></span><br></pre></td></tr></table></figure><p>模板语法for：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for user_obj in user_queryset %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_obj.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_obj.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">&#123;#            利用url问号后面携带参数的方式，将编辑按钮所在行的主键值发送给后端#&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/delete_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_user</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_list = models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=edit_id)</span><br><span class="line">    edit_obj = edit_list.first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 方式1 批量更新filter查询出来的列表中所有对象。只修改被修改的字段</span></span><br><span class="line">        edit_list.update(username=username, password=password)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方式2 单条数据更新。无论该字段是否被修改，重写所有字段(当字段特别多时，效率很低)</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password = password</span><br><span class="line">        edit_obj.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/userlist/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;edit_user.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_user</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取用户想要删除的数据id值</span></span><br><span class="line">    delete_id = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 弹窗二次确认</span></span><br><span class="line">    <span class="comment"># 批量删除数据库中找到对应的数据</span></span><br><span class="line">    models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=delete_id).delete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/userlist/&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>一般都会添加一个is_delete字段做软删除，而不会直接删除。</p></blockquote><h3 id="创建表关系"><a href="#创建表关系" class="headerlink" title="创建表关系"></a>创建表关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系。先将基表创建出来，然后再添加外键字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;书名&quot;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)  <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图书和出版社是一对多，并且书是多的一方，所以外键字段放在书表里面</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># to_field=默认与出版社表的主键字段做外键关联</span></span><br><span class="line">    <span class="comment"># 如果该字段是ForeignKey，则orm会自动在字段的后面加 _id -&gt; publish_id</span></span><br><span class="line">    <span class="comment"># 因此在定义ForeignKey的时候就不要加 _id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图书和作者是多对多的关系，外键字段建在任意一方均可，但是推荐建在查询频率较高的一方</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">    <span class="comment"># authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line">    <span class="comment"># orm将自动创建第三张关系表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>, on_delete=models.CASCADE)  <span class="comment"># django2.x之后要手动添加级联删除</span></span><br><span class="line">    <span class="comment"># OneToOneField()也会自动给字段 author_detail 加 _id 后缀</span></span><br><span class="line">    <span class="comment"># on_delete有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET(value)五个可选择的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 直接用字符类型更好</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>A表外键字段 = models.ForeignKey(to=B表)</code> </li><li><code>关系表外键字段 = models.ManyToManyField(to=B表)</code> </li><li><code>A表外键字段 = models.OneToOneField(to=B表)</code> </li></ul><blockquote><p>外键都会自动加_id后缀</p></blockquote>]]></content>
    
    
    <summary type="html">文件与数据</summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Part1</title>
    <link href="https://nephrencake.gitee.io/2021/06/Django-Part1/"/>
    <id>https://nephrencake.gitee.io/2021/06/Django-Part1/</id>
    <published>2021-06-13T01:44:36.000Z</published>
    <updated>2021-06-28T12:26:25.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Part1——基础操作"><a href="#Django-Part1——基础操作" class="headerlink" title="Django-Part1——基础操作"></a>Django-Part1——基础操作</h1><p>[TOC]</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><blockquote><p>后端很重要，每个领域的知识都应该学，要做一个全能型人才</p></blockquote><h2 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h2><ul><li>cs架构(Client/Server)  建立在局域网的基础上</li><li>bs架构(Browser/Server)  建立在广域网的基础上</li></ul><p>本质bs也是cs</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ol><li>HTTP协议              数据传输是明文</li><li>HTTPS协议             数据传输是密文</li><li>websocket协议      数据传输是密文</li></ol><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><ol><li>基于请求响应</li><li>基于TCP、IP作用于应用层之上的协议</li><li>无状态</li><li>短/无链接</li></ol><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ol><li>请求首行</li><li>请求头</li><li>请求体</li></ol><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/53165474">响应状态码大全</a></p><h2 id="wsgiref模块"><a href="#wsgiref模块" class="headerlink" title="wsgiref模块"></a>wsgiref模块</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol><li>urls.py                        路由与视图函数对应关系</li><li>views.py                    视图函数(后端业务逻辑)</li><li>templates文件夹        专门用来存储html文件</li></ol><p>按照功能的不同拆分之后，后续添加功能只需要在<code>urls.py</code>注册对应关系然后在<code>views.py</code>书写业务逻辑即可</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>请求来的时候解析http格式的数据，封装成大字典</li><li>响应走的时候给数据打包成符合http格式，再返回给浏览器</li></ol><h2 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h2><ul><li><p>静态网页</p><ul><li>页面上的数据是直接写死的，万年不变</li></ul></li><li><p>动态网页</p><ul><li>页面框架不变，而数据是实时获取的</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span>(<span class="params">env</span>):</span></span><br><span class="line">    <span class="comment"># 动态获取当前时间，即每次获取的都不固定</span></span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将后端获取到的数据传递给html文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/03 mytime.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    data = data.replace(<span class="string">&#x27;dwadasdsadsadasdas&#x27;</span>,current_time)  </span><br><span class="line">    <span class="comment"># 返回带有动态数据的html页面</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件，更加方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">env</span>):</span></span><br><span class="line">    user_dic = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;templates/04 get_dict.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><blockquote><p>模版语法仅在后端服务器上起作用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 模版语法(非常贴近python语法)</span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(&#x27;username&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[&#x27;hobby&#x27;] &#125;&#125;</span><br><span class="line"></span><br><span class="line"># 循环</span><br><span class="line">&#123;% for user_dict in user_list %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_dict.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_dict.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_dict.password&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user_dict.hobby&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure><h2 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h2><ol><li><p>django</p><ul><li>特点：大而全，自带的功能特别多</li><li>不足之处：有时候过于笨重</li><li>组成：<ul><li>socket部分用的是别人的：wsgiref模块</li><li>路由匹配用的是自己的</li><li>模版语法用的是自己的(没有jinja2好用 但是也很方便)</li></ul></li></ul></li><li><p>flask</p><ul><li>特点：小而精，自带的功能特别少。但第三方的模块特别多，如果将flask第三方的模块加起来完全可以盖过django，并且也越来越像django</li><li>不足之处：比较依赖于第三方的开发者，可能不兼容        </li><li>组成：<ul><li>socket部分用的是别人的：werkzeug(内部还是wsgiref模块)</li><li>路由匹配用的是自己的</li><li>模版语法用的是别人的：jinja2</li></ul></li></ul></li><li><p>tornado</p><ul><li>特点：异步非阻塞，支持高并发，甚至可以开发游戏服务器</li><li>组成：<ul><li>socket部分用的是自己的</li><li>路由匹配用的是自己的</li><li>模版语法用的是自己的</li></ul></li></ul></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="如何让你的计算机能够正常的启动django项目"><a href="#如何让你的计算机能够正常的启动django项目" class="headerlink" title="如何让你的计算机能够正常的启动django项目"></a>如何让你的计算机能够正常的启动django项目</h3><ol><li>计算机的名称不能是中文</li><li>一个pycharm窗口只开一个django项目</li><li>项目里面所有的文件也尽量不要出现中文</li><li>python解释器尽量使用3.4~3.6之间的版本(如果依然报错，点击最后一个报错信息，在源码中把逗号删掉)</li></ol><h3 id="django安装"><a href="#django安装" class="headerlink" title="django安装"></a>django安装</h3><ul><li>如果已经安装了其他版本，可以<code>pip install django==xx.xx.xx</code>自动卸载安装新的版本</li><li>在mac终端可以输入django-admin验证安装成功</li></ul><h2 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h2><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><ol><li><p>切换到指定目录，创建django项目<br><code>django-admin startproject mysite</code></p></li><li><p>启动django项目</p><p><code>cd /mysite</code></p><p><code>python3 manage.py runserver</code></p></li><li><p>创建应用</p><p><code>python manage.py startapp app01</code></p></li></ol><blockquote><p>使用命令行创建项目时一定要记得配置templates路径，建议使用pycharm创建</p></blockquote><h3 id="pycharm操作"><a href="#pycharm操作" class="headerlink" title="pycharm操作"></a>pycharm操作</h3><ol><li><p>new project -&gt; django</p></li><li><p>启动django项目</p><p>命令行 或者 绿色箭头运行</p></li><li><p>创建应用</p><p>命令行 或者 tools -&gt; run manage.py task -&gt; start app02(有提示，前期不要用，背完整命令)</p></li><li><p>修改端口号以及创建server</p><p>edit -&gt; config</p></li></ol><h3 id="命令行与pycharm创建的区别"><a href="#命令行与pycharm创建的区别" class="headerlink" title="命令行与pycharm创建的区别"></a>命令行与pycharm创建的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 命令行创建django项目时,不仅要创建templates文件夹，还需要自己在setting.py中配置路径。</span></span><br><span class="line"><span class="comment"># -&gt; settings.py</span></span><br><span class="line"><span class="comment"># pycharm创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 命令行创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>django是一款专门用来开发app的web框架。</p><p>而这里的app指的是一种具体的功能模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>,  <span class="comment"># 全写</span></span><br><span class="line">  <span class="string">&#x27;app01&#x27;</span>, <span class="comment"># 简写</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>创建出来的的应用第一步一定要先去settings.py中注册</p></blockquote><h2 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">  --manage.pydjango的入口文件</span><br><span class="line">  --db.sqlite3django自带的sqlite3数据库(不用)</span><br><span class="line">  --mysite文件夹</span><br><span class="line">  ---settings.py    配置文件</span><br><span class="line">    ---urls.py路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.pywsgiref模块(不考虑)</span><br><span class="line">  --app01文件夹</span><br><span class="line">  ---admin.pydjango后台管理</span><br><span class="line">    ---apps.py注册使用</span><br><span class="line">    ---migrations文件夹  数据库迁移记录</span><br><span class="line">    ---models.py数据库相关的 模型类(orm)</span><br><span class="line">  ---tests.py测试文件</span><br><span class="line">    ---views.py视图函数(视图层)</span><br></pre></td></tr></table></figure><h2 id="django小白必会三板斧"><a href="#django小白必会三板斧" class="headerlink" title="django小白必会三板斧"></a>django小白必会三板斧</h2><ol><li><p>HttpResponse</p><ul><li>返回字符串类型的数据</li></ul></li><li><p>render</p><ul><li><p>返回html文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -&gt; views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;test.html&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>redirect</p><ul><li>重定向<br><code>return redirect(&#39;https://www.mzitu.com/&#39;)</code><br><code>return redirect(&#39;/home/&#39;)</code> 跳转本站不需要加https</li></ul></li></ol>]]></content>
    
    
    <summary type="html">基础操作</summary>
    
    
    
    <category term="Django" scheme="https://nephrencake.gitee.io/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫-完结目录</title>
    <link href="https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%AB-%E5%AE%8C%E7%BB%93%E7%9B%AE%E5%BD%95/"/>
    <id>https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%AB-%E5%AE%8C%E7%BB%93%E7%9B%AE%E5%BD%95/</id>
    <published>2021-06-05T08:20:47.000Z</published>
    <updated>2021-06-06T05:26:02.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫——完结目录"><a href="#爬虫——完结目录" class="headerlink" title="爬虫——完结目录"></a>爬虫——完结目录</h1><p>教程视频传送门：</p><ol><li><a href="https://www.bilibili.com/video/BV1i54y1h75W?p=1">2021年最新Python爬虫教程+实战项目案例（最新录制）</a></li></ol><p>讲的非常好，只要跟着耐心做一遍就能整明白，很清晰。</p><p>==预计做一些小东西，爬取视频.jpg==</p><table><thead><tr><th align="center"><a href="/2021/05/%E7%88%AC%E8%99%ABPart1/">爬虫Part1——原理与request入门</a></th></tr></thead><tbody><tr><td align="center"><strong><a href="/2021/05/%E7%88%AC%E8%99%ABPart2/">爬虫Part2——数据解析与提取</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/06/%E7%88%AC%E8%99%ABPart3/">爬虫Part3——Requests进阶</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/06/%E7%88%AC%E8%99%ABPart4/">爬虫Part4——异步爬虫</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/06/%E7%88%AC%E8%99%ABPart5/">爬虫Part5——Selenuim</a></strong></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">完结目录</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Crawler" scheme="https://nephrencake.gitee.io/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>爬虫Part5</title>
    <link href="https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart5/"/>
    <id>https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart5/</id>
    <published>2021-06-03T15:30:39.000Z</published>
    <updated>2021-06-05T08:38:35.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫Part5——Selenuim"><a href="#爬虫Part5——Selenuim" class="headerlink" title="爬虫Part5——Selenuim"></a>爬虫Part5——Selenuim</h1><p>[TOC]</p><h2 id="Selenuim简介"><a href="#Selenuim简介" class="headerlink" title="Selenuim简介"></a>Selenuim简介</h2><ul><li><p>有些网页的响应内容经过复杂的加密，通过手动调试解密已经非常地狱，所以可以尝试直接获取浏览器运行后的结果。</p></li><li><p>selenium本体是自动化测试工具，控制浏览器操作。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载的文件名是msedgedriver.exe，默认启动为MicrosoftWebDriver.exe，修正一下文件名就可以不用给.Edge()传文件名参数了</span></span><br><span class="line">driver = webdriver.Edge()  <span class="comment"># 必须用已经在python路径中的driver启动</span></span><br><span class="line">driver.get(url)  <span class="comment"># 打开某个网址</span></span><br><span class="line"></span><br><span class="line">print(driver.title)  <span class="comment"># 百度一下，你就知道</span></span><br></pre></td></tr></table></figure><ul><li>使用selenium需要：1. <code>pip install selenium</code> 2. 下载对应版本的浏览器driver并放在python根目录下</li><li><code>.get()</code>打开某个网址</li></ul><h2 id="拉钩"><a href="#拉钩" class="headerlink" title="拉钩"></a>拉钩</h2><h3 id="元素获取与事件处理"><a href="#元素获取与事件处理" class="headerlink" title="元素获取与事件处理"></a>元素获取与事件处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Edge</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://lagou.com&quot;</span></span><br><span class="line"></span><br><span class="line">driver = Edge()</span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用选择工具找到 &#x27;//*[@id=&quot;changeCityBox&quot;]/p[1]/a&#x27; 或者下面都是可以的</span></span><br><span class="line">ele = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;changeCityBox&quot;]/p[1]/a/i&#x27;</span>)</span><br><span class="line">ele.click()</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;search_input&quot;]&#x27;</span>).send_keys(<span class="string">&quot;python&quot;</span>, Keys.ENTER)</span><br><span class="line"></span><br><span class="line">li_list = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_position_list&quot;]/ul/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    job_name = li.find_element_by_tag_name(<span class="string">&quot;h3&quot;</span>).text</span><br><span class="line">    job_price = li.find_element_by_xpath(<span class="string">&quot;./div/div/div[2]/div/span&quot;</span>).text</span><br><span class="line">    company_name = li.find_element_by_xpath(<span class="string">&#x27;./div/div[2]/div/a&#x27;</span>).text</span><br><span class="line">    print(company_name, job_name, job_price)</span><br></pre></td></tr></table></figure><ul><li><code>find_element_by_xpath() </code>获取元素对象</li><li><code>.click()</code> 使元素对象产生点击事件</li><li><code>.send_keys() </code>使元素对象填入文本</li><li><code>.text </code>获取元素内的文本</li></ul><h3 id="切换窗口与跳转frame"><a href="#切换窗口与跳转frame" class="headerlink" title="切换窗口与跳转frame"></a>切换窗口与跳转frame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Edge</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">web = Edge()</span><br><span class="line"></span><br><span class="line">web.get(<span class="string">&quot;http://lagou.com&quot;</span>)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;changeCityBox&quot;]/p[1]/a/i&#x27;</span>).click()</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;search_input&quot;]&#x27;</span>).send_keys(<span class="string">&quot;python&quot;</span>, Keys.ENTER)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_position_list&quot;]/ul/li[1]/div[1]/div[1]/div[1]/a/h3&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 在selenium的眼中，新窗口默认是不切换过来的，需要手动切换</span></span><br><span class="line">web.switch_to.window(web.window_handles[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新窗口中提取内容</span></span><br><span class="line">job_detail = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;job_detail&quot;]/dd[2]/div&#x27;</span>).text</span><br><span class="line">print(job_detail)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关掉子窗口，或者返回上一页面</span></span><br><span class="line">web.close()</span><br><span class="line"><span class="comment"># web.back()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变更selenium的窗口视角，回到原来的窗口中</span></span><br><span class="line">web.switch_to.window(web.window_handles[<span class="number">0</span>])</span><br><span class="line">print(web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_position_list&quot;]/ul/li[1]/div[1]/div[1]/div[1]/a/h3&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 跳转进入iframe</span></span><br><span class="line">web.get(<span class="string">&quot;https://www.91kanju.com/vod-play/541-2-1.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先拿到iframe</span></span><br><span class="line">iframe = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;player_iframe&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 切换到iframe</span></span><br><span class="line">web.switch_to.frame(iframe)</span><br><span class="line"><span class="comment"># 拿到数据</span></span><br><span class="line">tx = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/h3[1]&#x27;</span>).text</span><br><span class="line">print(tx)</span><br><span class="line">web.switch_to.default_content()  <span class="comment"># 切换回原页面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>switch_to.window(web.window_handles[-1])</code> 切换到最后一个标签</li><li><code>.close()</code> 关闭标签</li><li><code>.back()</code> 返回当前标签的上一页面</li><li><code>switch_to.frame(iframe) </code>切换到内嵌的html中</li></ul><h2 id="艺恩"><a href="#艺恩" class="headerlink" title="艺恩"></a>艺恩</h2><h3 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Edge</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备好参数配置</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">opt = &#123;</span><br><span class="line">    <span class="comment"># 这里是默认的</span></span><br><span class="line">    <span class="string">&quot;browserName&quot;</span>: <span class="string">&quot;MicrosoftEdge&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;WINDOWS&quot;</span>,</span><br><span class="line">    <span class="comment"># 设置无头</span></span><br><span class="line">    <span class="string">&quot;ms:edgeOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;extensions&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;--headless&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;--disable-gpu&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;--remote-debugging-port=9222&#x27;</span>,</span><br><span class="line">        ]&#125;</span><br><span class="line">&#125;</span><br><span class="line">web = Edge(capabilities=opt)  <span class="comment"># 把参数配置设置到浏览器中</span></span><br><span class="line"></span><br><span class="line">web.get(<span class="string">&quot;https://www.endata.com.cn/BoxOffice/BO/Year/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到经过数据加载以及js执行之后的结果的html内容!!!这样可以结合选择工具直接定位了</span></span><br><span class="line">print(web.page_source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到下拉列表</span></span><br><span class="line">sel_el = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;OptionDate&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 对元素进行包装, 包装成下拉菜单</span></span><br><span class="line">sel = Select(sel_el)</span><br><span class="line"><span class="comment"># 让浏览器进行调整选项</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sel.options)):  <span class="comment"># i就是每一个下拉框选项的索引位置</span></span><br><span class="line">    sel.select_by_index(i)  <span class="comment"># 按照索引进行切换</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    table = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;TableList&quot;]/table&#x27;</span>)</span><br><span class="line">    print(table.text)  <span class="comment"># 打印所有文本信息</span></span><br><span class="line">    print(<span class="string">&quot;===================================&quot;</span>)</span><br><span class="line"></span><br><span class="line">web.close()  <span class="comment"># 关闭页面</span></span><br><span class="line">web.quit()  <span class="comment"># 关闭浏览器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>.quit()</code> 关闭浏览器</li><li><code>web.page_source</code> 拿到经过数据加载以及js执行之后的结果的html内容！！！这样可以结合选择工具直接定位了</li><li><code>Select(sel_el).select_by_index(i)</code> 将元素包装成下拉菜单并按照索引进行切换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chrome设置无头</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=chrome_options)</span><br></pre></td></tr></table></figure><h2 id="超级鹰"><a href="#超级鹰" class="headerlink" title="超级鹰"></a>超级鹰</h2><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Edge</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">web = Edge()</span><br><span class="line">web.get(<span class="string">&quot;http://www.chaojiying.com/user/login/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理验证码</span></span><br><span class="line">img = web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/div/img&#x27;</span>).screenshot_as_png  <span class="comment"># 将元素组件以图像形式存储在内存</span></span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">&#x27;18614075987&#x27;</span>, <span class="string">&#x27;6035945&#x27;</span>, <span class="string">&#x27;914467&#x27;</span>)</span><br><span class="line">dic = chaojiying.PostPic(img, <span class="number">1902</span>)</span><br><span class="line">verify_code = dic[<span class="string">&#x27;pic_str&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向页面中填入用户名, 密码, 验证码</span></span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[1]/input&#x27;</span>).send_keys(<span class="string">&quot;18614075987&quot;</span>)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[2]/input&#x27;</span>).send_keys(<span class="string">&quot;6035945&quot;</span>)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[3]/input&#x27;</span>).send_keys(verify_code)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[4]/input&#x27;</span>).click()</span><br></pre></td></tr></table></figure><ul><li><code>.screenshot_as_png</code> 将元素组件以图像形式存储在内存</li></ul><h2 id="12306"><a href="#12306" class="headerlink" title="12306"></a>12306</h2><h3 id="反检测与滑块拖动"><a href="#反检测与滑块拖动" class="headerlink" title="反检测与滑块拖动"></a>反检测与滑块拖动</h3><ul><li><p><a href="https://blog.csdn.net/cqcre/article/details/110944075">chrome反检测driver</a></p></li><li><p><em>edge还没找到，暂时先不整了</em></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">&#x27;18614075987&#x27;</span>, <span class="string">&#x27;6035945&#x27;</span>, <span class="string">&#x27;914467&#x27;</span>)</span><br><span class="line"></span><br><span class="line">option = Options()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">web = Chrome(options=option)</span><br><span class="line">web.get(<span class="string">&quot;https://kyfw.12306.cn/otn/resources/login.html&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div[2]/ul/li[2]/a&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先处理验证码</span></span><br><span class="line">verify_img_element = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J-loginImg&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用超级鹰去识别验证码</span></span><br><span class="line">dic = chaojiying.PostPic(verify_img_element.screenshot_as_png, <span class="number">9004</span>)</span><br><span class="line">result = dic[<span class="string">&#x27;pic_str&#x27;</span>]  <span class="comment"># x1,y1|x2,y2|x3,y3</span></span><br><span class="line">rs_list = result.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> rs_list:  <span class="comment"># x1,y1</span></span><br><span class="line">    p_temp = rs.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    x = <span class="built_in">int</span>(p_temp[<span class="number">0</span>])</span><br><span class="line">    y = <span class="built_in">int</span>(p_temp[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 鼠移动标 -&gt; 点击 -&gt; 执行.perform()</span></span><br><span class="line">    ActionChains(web).move_to_element_with_offset(verify_img_element, x, y).click().perform()</span><br><span class="line"><span class="comment"># time.sleep(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入用户名和密码</span></span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J-userName&quot;]&#x27;</span>).send_keys(<span class="string">&quot;userName&quot;</span>)</span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J-password&quot;]&#x27;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J-login&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拖拽</span></span><br><span class="line">btn = web.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;nc_1_n1z&quot;]&#x27;</span>)</span><br><span class="line">ActionChains(web).drag_and_drop_by_offset(btn, <span class="number">300</span>, <span class="number">0</span>).perform()</span><br></pre></td></tr></table></figure><ul><li>拖动时不能切换页面</li><li>适当使用 <code>time.sleep(3)</code> 防止过快</li><li>事件链 ActionChains 必须在末尾协商执行语句 <code>.perform()</code></li></ul>]]></content>
    
    
    <summary type="html">Selenuim</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫Part4</title>
    <link href="https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart4/"/>
    <id>https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart4/</id>
    <published>2021-06-03T11:22:47.000Z</published>
    <updated>2021-06-05T04:28:17.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫Part4——异步爬虫"><a href="#爬虫Part4——异步爬虫" class="headerlink" title="爬虫Part4——异步爬虫"></a>爬虫Part4——异步爬虫</h1><p>[TOC]</p><h2 id="多线程与多进程"><a href="#多线程与多进程" class="headerlink" title="多线程与多进程"></a>多线程与多进程</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ol><li>进程是资源单位，开启一个程序则开启一个进程，为每个进程分配内存空间。</li><li>线程是执行单位，每一个进程至少要有一个线程，为每个线程分配计算资源。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        print(name, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  <span class="comment"># 传参做初始化</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>  <span class="comment"># 当线程被start时, 自动调用run()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            print(self.name, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1. 通过函数启动线程</span></span><br><span class="line">    t = Thread(target=func, args=(<span class="string">&quot;t&quot;</span>,))  <span class="comment"># 传参必须是元组</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    t0 = Thread(target=func, args=(<span class="string">&quot;t0&quot;</span>,))</span><br><span class="line">    t0.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 通过类启动线程</span></span><br><span class="line">    t1 = MyThread(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">    <span class="comment"># t1.run()  # 直接run则为单线程</span></span><br><span class="line">    t1.start()  <span class="comment"># 开启多线程</span></span><br><span class="line"></span><br><span class="line">    t2 = MyThread(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        print(<span class="string">&quot;主线程&quot;</span>, i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><ul><li>开进程太费资源，不建议使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        print(<span class="string">&quot;子&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=func)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        print(<span class="string">&quot;主进程&quot;</span>, i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池和进程池"><a href="#线程池和进程池" class="headerlink" title="线程池和进程池"></a>线程池和进程池</h3><ul><li>线程池：一次性开辟多个线程，只需要考虑给线程池子编写任务，线程任务的调度交给线程池来完成。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        print(name, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            t.submit(func, name=<span class="string">f&quot;线程<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 等待线程池中的任务全部执行完毕. 才继续执行和后续操作</span></span><br><span class="line">    print(<span class="string">&quot;yes!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="批量新发地菜价"><a href="#批量新发地菜价" class="headerlink" title="批量新发地菜价"></a>批量新发地菜价</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;source/菜价.csv&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>, mode=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url</span>):</span></span><br><span class="line">    resp = requests.get(url=url)</span><br><span class="line">    <span class="comment"># print(resp.text)</span></span><br><span class="line">    tree = etree.HTML(resp.text)</span><br><span class="line">    ts = tree.xpath(<span class="string">&quot;/html/body/div[2]/div[4]/div[1]/table&quot;</span>)[<span class="number">0</span>]  <span class="comment"># tbody是生成的，需要删去</span></span><br><span class="line">    <span class="comment"># print(len(ts))  # 即使结果只有一个，xpath()也永远返回list</span></span><br><span class="line">    trs = ts.xpath(<span class="string">&quot;./tr[position()&gt;1]&quot;</span>)  <span class="comment"># table下有多个tr，tr下有多个td</span></span><br><span class="line">    <span class="comment"># rows = t.xpath(&quot;./tr&quot;)[1:]</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">        tds = tr.xpath(<span class="string">&quot;./td/text()&quot;</span>)</span><br><span class="line">        <span class="comment"># 对数据做简单处理</span></span><br><span class="line">        tds = <span class="built_in">list</span>(td.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">for</span> td <span class="keyword">in</span> tds)  <span class="comment"># 将生成器转成list</span></span><br><span class="line">        <span class="comment"># print(tds)</span></span><br><span class="line">        csv_writer.writerow(tds)</span><br><span class="line">    print(url, <span class="string">&quot;have been downloaded!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">            u = <span class="string">f&quot;http://www.xinfadi.com.cn/marketanalysis/0/list%20/<span class="subst">&#123;i&#125;</span>.shtml&quot;</span></span><br><span class="line">            t.submit(download, url=u)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><ul><li><p>协程能够更加⾼效的利用CPU资源。</p></li><li><p><code>time.sleep()</code>、<code>input()</code>以及<code>request.get()</code>的等待过程中，该线程都处于阻塞状态，CPU资源浪费。</p><ul><li>一般情况下，遇到IO操作时，线程都会处于阻塞状态。</li></ul></li><li><p>协程：当程序遇到阻塞时，可以选择性地切换到其他任务上。(单线程多任务异步操作)</p><ul><li><p>在微观上，是一个个任务进行切换</p></li><li><p>在宏观上，能感受到的其实是多个任务一起在执行</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫赛利亚&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g = func()  <span class="comment"># 此时的函数是异步协程函数，将返回一个协程对象</span></span><br><span class="line">    <span class="comment"># print(g)</span></span><br><span class="line">    asyncio.run(g)  <span class="comment"># 协程程序运行需要asyncio模块的支持(需要python3.7以上)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(3)  # sleep、get属于同步操作。当程序出现了同步操作的时候. 异步就中断了</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)  <span class="comment"># asyncio.sleep才是异步睡眠。需要使用await挂起</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f1 = func1()</span><br><span class="line">    f2 = func2()</span><br><span class="line">    f3 = func3()</span><br><span class="line">    tasks = [</span><br><span class="line">        f1, f2, f3</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    t1 = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一次性启动多个任务(协程)</span></span><br><span class="line">    <span class="comment"># asyncio.run(asyncio.wait(tasks))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># python版本低于3.7时会有以下报错</span></span><br><span class="line">    <span class="comment"># AttributeError: module &#x27;asyncio&#x27; has no attribute &#x27;run&#x27;</span></span><br><span class="line">    <span class="comment"># 修正:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(t2 - t1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 第一种写法</span></span><br><span class="line">    <span class="comment"># f1 = func1()</span></span><br><span class="line">    <span class="comment"># await f1  # 一般await挂起操作放在协程对象前面</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二种写法(推荐)</span></span><br><span class="line">    tasks = [</span><br><span class="line">        func1(),  <span class="comment"># py3.8以后asyncio.create_task(func1())</span></span><br><span class="line">        func2(),</span><br><span class="line">        func3()</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="comment"># 一次性启动多个任务(协程)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义协程对象</span></span><br><span class="line">    m = main()</span><br><span class="line">    <span class="comment"># 定义事件循环对象容器</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># task = asyncio.ensure_future(coroutine)</span></span><br><span class="line">    <span class="comment"># 将协程转为task任务</span></span><br><span class="line">    task = loop.create_task(m)</span><br><span class="line">    <span class="comment"># 将task任务扔进事件循环对象中并触发</span></span><br><span class="line">    loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(t2 - t1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="aiohttp异步请求"><a href="#aiohttp异步请求" class="headerlink" title="aiohttp异步请求"></a>aiohttp异步请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&quot;http://kr.shanghai-jiuxin.com/file/2020/1031/191468637cab2f0206f7d1d9b175ac81.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://kr.shanghai-jiuxin.com/file/2020/1031/563337d07af599a9ea64e620729f367e.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://kr.shanghai-jiuxin.com/file/2020/1031/774218be86d832f359637ab120eba52d.jpg&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">aio_download</span>(<span class="params">url</span>):</span></span><br><span class="line">    name = url.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]  <span class="comment"># 从右往左按&#x27;/&#x27;切分一次，即[&#x27;http...&#x27;, &#x27;...jpg&#x27;]</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="comment">#  拿到请求</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;source/&quot;</span> + name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 读取内容为异步，需要挂起</span></span><br><span class="line">    print(name, <span class="string">&quot;downloaded!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    task = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        task.append(aio_download(url))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    task = loop.create_task(main())</span><br><span class="line">    loop.run_until_complete(task)</span><br></pre></td></tr></table></figure><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="纵横小说"><a href="#纵横小说" class="headerlink" title="纵横小说"></a>纵横小说</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> aiofiles  <span class="comment"># 异步文件读写</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;http://book.zongheng.com/showchapter/1084237.html&quot;</span></span><br><span class="line"><span class="string">&quot;http://book.zongheng.com/chapter/1084237/63603883.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># resp = requests.get(&quot;http://book.zongheng.com/chapter/1084237/63603883.html&quot;)</span></span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">aio_download</span>(<span class="params">path, href</span>):</span></span><br><span class="line">    url = href</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">            dic = <span class="keyword">await</span> resp.text()</span><br><span class="line">            tree = etree.HTML(dic)</span><br><span class="line">            contents = tree.xpath(<span class="string">&quot;/html/body/div[2]/div[3]/div[3]/div/div[5]/p/text()&quot;</span>)</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(path, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">                    <span class="keyword">await</span> f.write(content + <span class="string">&quot;\n&quot;</span>)  <span class="comment"># 把小说内容写出</span></span><br><span class="line">    print(path, <span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_catalog</span>(<span class="params">url</span>):</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="comment"># 获取书本主页面响应</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    tree = etree.HTML(resp.text)</span><br><span class="line">    chs = tree.xpath(<span class="string">&quot;/html/body/div[3]/div[2]/div[2]/div/ul&quot;</span>)[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># todo 初步爬取</span></span><br><span class="line">    <span class="comment"># print(len(chs))  # 有四卷</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> chs:  <span class="comment"># 获取每一卷中，各章节的标题和链接</span></span><br><span class="line">        hrefs = item.xpath(<span class="string">&quot;./li/a/@href&quot;</span>)</span><br><span class="line">        titles = item.xpath(<span class="string">&quot;./li/a/text()&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> title, href <span class="keyword">in</span> <span class="built_in">zip</span>(titles, hrefs):</span><br><span class="line">            <span class="comment"># 准备异步任务</span></span><br><span class="line">            <span class="comment"># print(title, href)</span></span><br><span class="line">            path = <span class="string">&quot;source/&quot;</span> + title + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">            tasks.append(aio_download(path, href))</span><br><span class="line">            <span class="comment"># break  # todo 初步爬取</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b_id = <span class="string">&quot;1084237&quot;</span></span><br><span class="line">    url_book = <span class="string">f&quot;http://book.zongheng.com/showchapter/<span class="subst">&#123;b_id&#125;</span>.html&quot;</span></span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    task = loop.create_task(get_catalog(url_book))</span><br><span class="line">    loop.run_until_complete(task)</span><br></pre></td></tr></table></figure><ul><li>教程原网页已炸，这里用其他网站做测试学习</li><li>主要还是需要自己去定位资源位置</li><li><em>有加密的是真的烦，还有些直接导向其他域名，离谱</em></li><li><em>幸好纵横的基本不反爬，比较容易</em></li></ul><h3 id="抓取视频"><a href="#抓取视频" class="headerlink" title="抓取视频"></a>抓取视频</h3><ul><li><p>一般在html中写入<code>&lt;video src=&quot;不能播的视频.mp4&quot;&gt;&lt;/video&gt;</code>即可播放视频，但是其需要加载完整个视频资源，效率极低。</p></li><li><p>网站上视频一般都需要：①转码成不同分辨率； ②切片处理以减少拉动进度条时的资源占用。</p></li><li><p>因此需要一个M3U8（本质就是utf-8文本）文件记录：1.视频切片播放顺序；2.视频切片存放的路径……</p></li><li><p>想要抓取一个视频:</p><ol><li>找到m3u8</li><li>通过m3u8下载到ts文件</li><li>把ts文件合并为一个mp4文件</li></ol></li></ul><h4 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">流程:</span></span><br><span class="line"><span class="string">    1. 拿到548121-1-1.html的页面源代码</span></span><br><span class="line"><span class="string">    2. 从源代码中提取到m3u8的url。</span></span><br><span class="line"><span class="string">    3. 下载m3u8</span></span><br><span class="line"><span class="string">    4. 读取m3u8文件, 下载视频</span></span><br><span class="line"><span class="string">    5. 合并视频</span></span><br><span class="line"><span class="string">tips:</span></span><br><span class="line"><span class="string">    1. 第二部的url中?note=是从第一步中拿到的，即必须先第一步才能第二步</span></span><br><span class="line"><span class="string">    2. 这个note具备时效性，间隔太长则拒绝访问</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># url在js中，所以用re而不是xpath来提取m3u8的url地址</span></span><br><span class="line"><span class="comment"># 复制并查找 url: &#x27; 和 &#x27;, 是否在文件中唯一</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;url: &#x27;(?P&lt;url&gt;.*?)&#x27;,&quot;</span>, re.S)</span><br><span class="line"></span><br><span class="line">url_html = <span class="string">&quot;https://www.91kanju.com/vod-play/54812-1-1.html&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;User-Agent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url_html, headers=headers)</span><br><span class="line">url_m3u8 = obj.search(resp.text).group(<span class="string">&quot;url&quot;</span>)  <span class="comment"># 拿到m3u8的地址</span></span><br><span class="line">print(url_m3u8)</span><br><span class="line">resp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载m3u8文件</span></span><br><span class="line">resp_m3u8 = requests.get(url_m3u8, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;哲仁王后.m3u8&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(resp_m3u8.content)  <span class="comment"># 直接以wb二进制形式写入，避免编码问题</span></span><br><span class="line"></span><br><span class="line">resp_m3u8.close()</span><br><span class="line">print(<span class="string">&quot;下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析m3u8文件</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;哲仁王后.m3u8&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line = line.strip()  <span class="comment"># 去除空格, 空白, 换行符</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):  <span class="comment"># 如果以#开头. 则跳过</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载视频片段</span></span><br><span class="line">        <span class="keyword">with</span> requests.get(line) <span class="keyword">as</span> resp3:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;video/<span class="subst">&#123;n&#125;</span>.ts&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(resp3.content)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;完成了1个&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="复杂版"><a href="#复杂版" class="headerlink" title="复杂版"></a>复杂版</h4><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart4/image-20210605103918532.png" alt="image-20210605103918532"></p><ul><li>当遇到右键点不了的网页时，可以通过source-&gt;top/buding520.com/acg/19888/1.html找到页面源代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">思路:</span></span><br><span class="line"><span class="string">    1. 拿到主页面的页面源代码, 找到iframe</span></span><br><span class="line"><span class="string">    2. 从iframe的页面源代码中拿到m3u8文件的地址</span></span><br><span class="line"><span class="string">    3. 下载第一层m3u8文件 -&gt; 下载第二层m3u8文件(视频存放路径)</span></span><br><span class="line"><span class="string">    4. 下载ts切片视频(协程)</span></span><br><span class="line"><span class="string">    5. 下载秘钥, 进行解密操作(协程)</span></span><br><span class="line"><span class="string">    6. 合并所有ts文件为一个mp4文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  <span class="comment"># pip install pycryptodome + 文件夹改名crypto-&gt;Crypto</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iframe_src</span>(<span class="params">url</span>):</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 可以用bs/xpath</span></span><br><span class="line">    src = main_page.find(<span class="string">&quot;iframe&quot;</span>).get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line">    <span class="comment"># return &quot;https://boba.52kuyun.com/share/xfPs9NPHvYGhNzFp&quot;  # 为了测试</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_first_m3u8_url</span>(<span class="params">url</span>):</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="comment"># print(resp.text)</span></span><br><span class="line">    <span class="comment"># 从js中找，所以用re</span></span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;var main = &quot;(?P&lt;m3u8_url&gt;.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">    m3u8_url = obj.search(resp.text).group(<span class="string">&quot;m3u8_url&quot;</span>)</span><br><span class="line">    <span class="comment"># print(m3u8_url)</span></span><br><span class="line">    <span class="keyword">return</span> m3u8_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_m3u8_file</span>(<span class="params">url, name</span>):</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(resp.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_ts</span>(<span class="params">url, name, session</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">f&quot;video2/<span class="subst">&#123;name&#125;</span>&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">await</span> f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 把下载到的内容写入到文件中</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">aio_download</span>(<span class="params">up_url</span>):</span>  <span class="comment"># https://boba.52kuyun.com/20170906/Moh2l9zV/hls/</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># 提前准备好session</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;越狱第一季第一集_second_m3u8.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># line就是xxxxx.ts</span></span><br><span class="line">                line = line.strip()  <span class="comment"># 去掉没用的空格和换行</span></span><br><span class="line">                <span class="comment"># 拼接真正的ts路径</span></span><br><span class="line">                ts_url = up_url + line</span><br><span class="line">                task = asyncio.create_task(download_ts(ts_url, line, session))  <span class="comment"># 创建任务</span></span><br><span class="line">                tasks.append(task)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> asyncio.wait(tasks)  <span class="comment"># 等待任务结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">url</span>):</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dec_ts</span>(<span class="params">name, key</span>):</span></span><br><span class="line">    aes = AES.new(key=key, IV=<span class="string">b&quot;0000000000000000&quot;</span>, mode=AES.MODE_CBC)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">f&quot;video2/<span class="subst">&#123;name&#125;</span>&quot;</span>, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">            aiofiles.<span class="built_in">open</span>(<span class="string">f&quot;video2/temp_<span class="subst">&#123;name&#125;</span>&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        bs = <span class="keyword">await</span> f1.read()  <span class="comment"># 从源文件读取内容</span></span><br><span class="line">        <span class="keyword">await</span> f2.write(aes.decrypt(bs))  <span class="comment"># 把解密好的内容写入文件</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>处理完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">aio_dec</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;越狱第一季第一集_second_m3u8.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="comment"># 开始创建异步任务</span></span><br><span class="line">            task = asyncio.create_task(dec_ts(line, key))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_ts</span>():</span>  <span class="comment"># 其实也可以用ab追加写入</span></span><br><span class="line">    <span class="comment"># mac: cat 1.ts 2.ts 3.ts &gt; xxx.mp4</span></span><br><span class="line">    <span class="comment"># windows: copy /b 1.ts+2.ts+3.ts xxx.mp4</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;越狱第一季第一集_second_m3u8.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            line = line.strip()</span><br><span class="line">            lst.append(<span class="string">f&quot;video2/temp_<span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;+&quot;</span>.join(lst)  <span class="comment"># 1.ts+2.ts+3.ts...</span></span><br><span class="line">    os.system(<span class="string">f&quot;copy /b <span class="subst">&#123;s&#125;</span> movie.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 1. 拿到主页面的页面源代码, 找到iframe对应的url</span></span><br><span class="line">    iframe_src = get_iframe_src(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 拿到第一层的m3u8文件的下载地址</span></span><br><span class="line">    first_m3u8_url = get_first_m3u8_url(iframe_src)</span><br><span class="line">    <span class="comment"># 拿到iframe的域名 &quot;https://boba.52kuyun.com/share/xfPs9NPHvYGhNzFp&quot;</span></span><br><span class="line">    iframe_domain = iframe_src.split(<span class="string">&quot;/share&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 拼接出真正的m3u8的下载路径</span></span><br><span class="line">    first_m3u8_url = iframe_domain + first_m3u8_url</span><br><span class="line">    <span class="comment"># https://boba.52kuyun.com/20170906/Moh2l9zV/index.m3u8?sign=548ae366a075f0f9e7c76af215aa18e1</span></span><br><span class="line">    <span class="comment"># print(first_m3u8_url)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.1 下载第一层m3u8文件</span></span><br><span class="line">    download_m3u8_file(first_m3u8_url, <span class="string">&quot;越狱第一季第一集_first_m3u8.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.2 下载第二层m3u8文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;越狱第一季第一集_first_m3u8.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.strip()  <span class="comment"># 去掉空白或者换行符  hls/index.m3u8</span></span><br><span class="line">                <span class="comment"># 准备拼接第二层m3u8的下载路径</span></span><br><span class="line">                <span class="comment"># https://boba.52kuyun.com/20170906/Moh2l9zV/ + hls/index.m3u8</span></span><br><span class="line">                <span class="comment"># https://boba.52kuyun.com/20170906/Moh2l9zV/hls/index.m3u8</span></span><br><span class="line">                <span class="comment"># https://boba.52kuyun.com/20170906/Moh2l9zV/hls/cFN8o3436000.ts</span></span><br><span class="line">                second_m3u8_url = first_m3u8_url.split(<span class="string">&quot;index.m3u8&quot;</span>)[<span class="number">0</span>] + line</span><br><span class="line">                download_m3u8_file(second_m3u8_url, <span class="string">&quot;越狱第一季第一集_second_m3u8.txt&quot;</span>)</span><br><span class="line">                print(<span class="string">&quot;m3u8文件下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 下载视频</span></span><br><span class="line">    second_m3u8_url_up = second_m3u8_url.replace(<span class="string">&quot;index.m3u8&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 异步协程</span></span><br><span class="line">    asyncio.run(aio_download(second_m3u8_url_up))  <span class="comment"># 测试的使用可以注释掉</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.1 拿到秘钥</span></span><br><span class="line">    key_url = second_m3u8_url_up + <span class="string">&quot;key.key&quot;</span>  <span class="comment"># 偷懒写法, 正常应该去m3u8文件里去找</span></span><br><span class="line">    key = get_key(key_url)</span><br><span class="line">    <span class="comment"># 5.2 解密</span></span><br><span class="line">    asyncio.run(aio_dec(key))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6. 合并ts文件为mp4文件</span></span><br><span class="line">    merge_ts()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># ↓↓↓网站已挂↓↓↓</span></span><br><span class="line">    url = <span class="string">&quot;https://www.91kanju.com/vod-play/541-2-1.html&quot;</span></span><br><span class="line">    main(url)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>寻找思路时：复杂问题简单化（逻辑化思路）</p><p>实现思路时：简单问题复杂化（思考更多可能性）</p></blockquote>]]></content>
    
    
    <summary type="html">异步爬虫</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫Part3</title>
    <link href="https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart3/"/>
    <id>https://nephrencake.gitee.io/2021/06/%E7%88%AC%E8%99%ABPart3/</id>
    <published>2021-06-02T15:00:49.000Z</published>
    <updated>2021-06-03T15:32:41.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫Part3——Requests进阶"><a href="#爬虫Part3——Requests进阶" class="headerlink" title="爬虫Part3——Requests进阶"></a>爬虫Part3——Requests进阶</h1><p>[TOC]</p><h2 id="Requests进阶概述"><a href="#Requests进阶概述" class="headerlink" title="Requests进阶概述"></a>Requests进阶概述</h2><p>HTTP协议中的请求头header，⼀般会包含安全验证信息，比如常见的User-Agent, token, cookie等。</p><ol><li>模拟浏览器登录 -&gt; 处理cookie</li><li>防盗链处理 -&gt; 抓取梨视频数据</li><li>代理 -&gt; 防⽌被封IP</li></ol><h2 id="模拟浏览器登录"><a href="#模拟浏览器登录" class="headerlink" title="模拟浏览器登录"></a>模拟浏览器登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化session</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 准备帐密</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;loginName&quot;</span>: <span class="string">&quot;loginName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 必须先登录，才能使session获得cookie</span></span><br><span class="line">url = <span class="string">&quot;https://passport.17k.com/ck/user/login&quot;</span></span><br><span class="line">resp_login = session.post(url=url, data=data)</span><br><span class="line">print(resp_login.text)</span><br><span class="line">print(resp_login.cookies)</span><br><span class="line"><span class="comment"># 使用包含cookie的session拿到书架数据</span></span><br><span class="line">resp_book = session.get(<span class="string">&quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;</span>)</span><br><span class="line">print(resp_book.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在header中添加cookie进行请求是等效的</span></span><br><span class="line">resp_req = requests.get(<span class="string">&quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;</span>, headers=&#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;cookie&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">print(resp_req.json())</span><br></pre></td></tr></table></figure><ul><li>使用错误的帐密登录，以抓取login信息</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603110845823.png" alt="image-20210603110845823"></p><h2 id="防盗链处理"><a href="#防盗链处理" class="headerlink" title="防盗链处理"></a>防盗链处理</h2><ul><li>虽然在开发者工具中能看到<video>标签，但这是本地通过js脚本生成的。而在网页源代码中，<video>是不存在的，视频资源是二次加载的。</video></video></li><li>服务器返回页面源代码之后生成以下右边的文件，之后的操作与页面源代码就没有关系了。</li><li>浏览器的视图界面是由右边的文件实时渲染的。当删除右边的语句时，左边的相应组件也会同步消失。</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603125745611.png" alt="image-20210603125745611"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频原网站</span></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1713901&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]  <span class="comment"># 截取id</span></span><br><span class="line">videoStatus_url = <span class="string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.8770894467476524&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;User-Agent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: url  <span class="comment"># 防盗链，溯源本次请求由哪个url产生</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修正视频地址</span></span><br><span class="line">resp = requests.get(url=videoStatus_url, headers=headers)</span><br><span class="line">dic = resp.json()</span><br><span class="line">system_time = dic[<span class="string">&quot;systemTime&quot;</span>]</span><br><span class="line">video_url = dic[<span class="string">&quot;videoInfo&quot;</span>][<span class="string">&quot;videos&quot;</span>][<span class="string">&quot;srcUrl&quot;</span>].replace(system_time, <span class="string">f&quot;cont-<span class="subst">&#123;contId&#125;</span>&quot;</span>)</span><br><span class="line">print(video_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;contId&#125;</span>.mp4&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(requests.get(video_url).content)</span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;User-Agent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;115.219.2.82:3256&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>, headers=headers, proxies=proxies)</span><br><span class="line">resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><h2 id="网易云音乐评论"><a href="#网易云音乐评论" class="headerlink" title="网易云音乐评论"></a>网易云音乐评论</h2><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603164018457.png" alt="image-20210603164018457"></p><ul><li>使用定位工具可以发现评论在html文件中的位置，但是不要忘了这是经过脚本生成的，并不是通过get使服务器返还的初始的网页源代码。</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603163736597.png" alt="image-20210603163736597"></p><ul><li>网易云音乐的网页页面是由多个html拼接而成，因此可以看见有<strong>框架源代码</strong>和<strong>网页源代码</strong>两个html文件。</li><li>但是在两个html中搜寻，均没有评论资源。由此可知，评论是通过二次请求得到的。</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603163551436.png" alt="image-20210603163551436"></p><ul><li>使用Network抓包工具-&gt;筛选XHR二次请求-&gt;找到comment资源</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603164605502.png" alt="image-20210603164605502"></p><ul><li>继续查看headers信息。可知：<ol><li>请求目标的URL：<code>https://music.163.com/weapi/comment/resource/comments/get</code></li><li><code>csrf_token=</code>后为登录信息，<code>?</code>后的参数可以忽略</li><li><code>Request Method: POST</code>请求方式为<strong>POST</strong>。</li><li>同时发送了两个加密data：<code>params</code>和<code>encSecKey</code></li></ol></li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603170549795.png" alt="image-20210603170549795"></p><ul><li>查看发起请求之前所调用过的栈、js脚本执行的过程。最开始执行的在最底部。点击最后调用的脚本。</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603171043357.png" alt="image-20210603171043357"></p><ul><li>现在是压缩过后的代码，需要点击正下方的按钮，更换成优质打印。</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603171817947.png" alt="image-20210603171817947"></p><ul><li>在语句<code>send()</code>处设置断点，刷新网页</li><li>观察变量<code>request-&gt;url</code>，恢复程序执行直到更新为<code>https://music.163.com/weapi/comment/resource/comments/get</code></li><li>数据处于加密状态，因此需要通过调用堆栈不断回调函数，直到找到未加密的data</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603173446525.png" alt="image-20210603173446525"></p><ul><li>回调时发现data未加密，立刻定位到加密函数为<code>t8l.be8W</code></li><li>数据在变量<code>i8a</code>与变量<code>e8e</code>之间完成了加密</li></ul><p><img src="/2021/06/%E7%88%AC%E8%99%ABPart3/image-20210603174358762.png" alt="image-20210603174358762"></p><ul><li>需要在已定的小范围内进一步缩小范围，因此在函数开始处增加新断点，重新刷新页面</li><li>发现在<code>window.asrsea()</code>方法中<code>i8a</code>作为参数之一，返回变量<code>bMl1x</code></li><li>发现变量<code>bMl1x</code>已经被加密，拥有<code>encSecKey</code>和<code>encText</code></li><li><code>bMl1x</code>的数据又赋给<code>e8e.data</code>，由此加密data完成</li></ul><h3 id="简易实现版"><a href="#简易实现版" class="headerlink" title="简易实现版"></a>简易实现版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">api = <span class="string">&quot;https://music.163.com/api/comment/resource/comments/get&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1841819403&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1841819403&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(api, params=data)</span><br><span class="line">json = resp.json()</span><br><span class="line">print(resp.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Requests进阶</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫Part2</title>
    <link href="https://nephrencake.gitee.io/2021/05/%E7%88%AC%E8%99%ABPart2/"/>
    <id>https://nephrencake.gitee.io/2021/05/%E7%88%AC%E8%99%ABPart2/</id>
    <published>2021-05-22T12:59:16.000Z</published>
    <updated>2021-06-03T15:32:29.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫Part2——数据解析与提取"><a href="#爬虫Part2——数据解析与提取" class="headerlink" title="爬虫Part2——数据解析与提取"></a>爬虫Part2——数据解析与提取</h1><p>[TOC]</p><h2 id="数据解析概述"><a href="#数据解析概述" class="headerlink" title="数据解析概述"></a>数据解析概述</h2><p>当需要只是需要部分网页的内容而不是全部时，就要用到数据提取：</p><ol><li><p>Re解析</p></li><li><p>Bs4解析</p></li><li><p>Xpath解析</p></li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>正则表达式（Regular Expression）是⼀种使用表达式的方式对字符串进行匹配的语法规则。</p><p>在线测试正则表达式：<a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">元字符: 具有固定含义的特殊符号</span><br><span class="line"></span><br><span class="line">. 匹配除换⾏符以外的任意字符</span><br><span class="line">\w 匹配字⺟或数字或下划线</span><br><span class="line">\s 匹配任意的空⽩符</span><br><span class="line">\d 匹配数字</span><br><span class="line">\n 匹配⼀个换⾏符</span><br><span class="line">\t 匹配⼀个制表符</span><br><span class="line"></span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W 匹配⾮字⺟或数字或下划线</span><br><span class="line">\D 匹配⾮数字</span><br><span class="line">\S 匹配⾮空⽩符</span><br><span class="line">a|b 匹配字符a或字符b</span><br><span class="line">() 匹配括号内的表达式，也表示⼀个组</span><br><span class="line">[...] 匹配字符组中的字符  # 是否属于[a-zA-Z0-9]</span><br><span class="line">[^...] 匹配除了字符组中字符的所有字符  # 这里^表示非</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">量词: 控制前⾯的元字符出现的次数</span><br><span class="line"></span><br><span class="line">* 重复零次或更多次(尽可能多地去匹配)</span><br><span class="line">+ 重复⼀次或更多次</span><br><span class="line">? 重复零次或⼀次</span><br><span class="line">&#123;n&#125; 重复n次</span><br><span class="line">&#123;n,&#125; 重复n次或更多次</span><br><span class="line">&#123;n,m&#125; 重复n到m次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">匹配:贪婪匹配和惰性匹配</span><br><span class="line"></span><br><span class="line">.* 贪婪匹配  # 尽可能长的匹配</span><br><span class="line">.*? 惰性匹配  # 回溯到最短的一次匹配</span><br></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str: 玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏啊</span><br><span class="line">reg: 玩⼉.*?游戏</span><br><span class="line">结果: 玩⼉吃鸡游戏</span><br><span class="line">reg: 玩⼉.*游戏</span><br><span class="line">结果: 玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏 </span><br><span class="line"> </span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line">reg: &lt;.*&gt;</span><br><span class="line">结果: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line">reg: &lt;.*?&gt;</span><br><span class="line">结果: &lt;div&gt;      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;&lt;span&gt;饭团&lt;/span&gt;</span><br><span class="line">reg: &lt;div&gt;.*?&lt;/div&gt;</span><br><span class="line">结果: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="Re模块-Regular-Expression"><a href="#Re模块-Regular-Expression" class="headerlink" title="Re模块(Regular Expression)"></a>Re模块(Regular Expression)</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findall: 匹配字符串中所有符合正则的内容，返回list</span></span><br><span class="line">lst = re.findall(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line">print(lst)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;5&#x27;, &#x27;5000&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串前加r防止转义，表示原生字符串（rawstring）。</p><p>不使用r，则匹配时候需要4个反斜杠：正则需要转化一次，python解释器需要转化。</p></blockquote><h4 id="finditer"><a href="#finditer" class="headerlink" title="finditer()"></a>finditer()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finditer: 匹配字符串中所有符合正则的内容，返回iter</span></span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)  <span class="comment"># 字符串前加r防止转义</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    print(i)</span><br><span class="line">    print(i.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match=&#x27;5&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(10, 14), match=&#x27;5000&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 5000</span></span><br></pre></td></tr></table></figure><ul><li>要使用.group()提取match对象的value</li></ul><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search: 找到第一个就返回，返回的是match，使用group()提取</span></span><br><span class="line">s = re.search(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line">print(s.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># match: 从第一个字符开始要求匹配，返回的是match</span></span><br><span class="line">m = re.match(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line">print(m.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul><li>如果字符串为<code>&quot;在5点之前. 你要给我5000万&quot;</code>则匹配失败</li><li>相当于自带<code>^</code></li></ul><h4 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rule = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">lst = rule.findall(<span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;5&#x27;, &#x27;5000&#x27;]</span></span><br><span class="line"></span><br><span class="line">m = rule.match(<span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line">print(m.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul><li>预加载正则表达式</li><li>可以反复使用</li></ul><h4 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;⻄游记&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;中国联通&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;⻄&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;中国&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;游&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;联通&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;记&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;中通&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;⻄记&#x27;&gt;&lt;span id=&#x27;5&#x27;&gt;国联&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class=&#x27;(?P&lt;class&gt;.*?&#x27;&gt;&lt;span id)=&#x27;(?P&lt;id&gt;\d+)&#x27;&gt;(?P&lt;val&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)  <span class="comment"># re.S表示使.能够匹配换行符</span></span><br><span class="line">result = obj.search(s)</span><br><span class="line">print(result.group())  <span class="comment"># &lt;div class=&#x27;⻄游记&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;中国联通&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line">print(result.group(<span class="string">&quot;id&quot;</span>))  <span class="comment"># 1</span></span><br><span class="line">print(result.group(<span class="string">&quot;val&quot;</span>))  <span class="comment"># 中国联通</span></span><br><span class="line">print(result.group(<span class="string">&quot;class&quot;</span>))  <span class="comment"># ⻄游记&#x27;&gt;&lt;span id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>分组：使用<code>(?P&lt;变量名&gt;正则表达式)</code>进一步提取内容</li></ul><h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><h4 id="豆瓣top250电影排行"><a href="#豆瓣top250电影排行" class="headerlink" title="豆瓣top250电影排行"></a>豆瓣top250电影排行</h4><ul><li>首先要确认目标数据位置（源码or抓包）</li><li>抓不到的时候首先看<code>User-Agent</code></li><li>次数太频繁的时候记得<code>Keep-Alive</code></li><li>正则表达式写的越详细越容易匹配</li><li>①用<code>\n\s*</code>去匹配换行和空格；②用<code>.strip()</code>去除空格</li><li><code>match.groupdict()</code>转换成字典</li><li><code>newline=&quot;&quot;</code>不使用自动换行符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预编译正则表达式: &quot;电影名称&quot;,&quot;上映年份&quot;,&quot;评分&quot;,&quot;评分⼈数&quot;</span></span><br><span class="line">rule = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;li&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;&lt;br&gt;\n\s*(?P&lt;year&gt;\d+)&amp;nbsp;/&amp;nbsp;.*?&#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;&lt;span&gt;(?P&lt;person&gt;.*?)人评价&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备文件写入</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)  <span class="comment"># 设置newline=&quot;&quot;不使用多余换行符</span></span><br><span class="line">csv_writer = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页源码</span></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;Keep-Alive&#x27;</span>: <span class="string">&#x27;timeout=15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">    <span class="comment"># 跳转多个页面</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: p</span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url=url, headers=headers, params=params)</span><br><span class="line">    <span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析</span></span><br><span class="line">    result = rule.finditer(resp.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># print(i.group(&quot;name&quot;))</span></span><br><span class="line">        <span class="comment"># print(i.group(&quot;year&quot;))  # 取出空白符也可以使用.strip()</span></span><br><span class="line">        <span class="comment"># print(i.group(&quot;score&quot;))</span></span><br><span class="line">        <span class="comment"># print(i.group(&quot;person&quot;))</span></span><br><span class="line">        dic = i.groupdict()  <span class="comment"># 转换成dict</span></span><br><span class="line">        print(dic)</span><br><span class="line">        csv_writer.writerow(dic.values())</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="电影天堂板块信息"><a href="#电影天堂板块信息" class="headerlink" title="电影天堂板块信息"></a>电影天堂板块信息</h4><ul><li>html中标签<code>&lt;a href=&#39;url&#39;&gt;xxx&lt;/a&gt;</code>表示超链接</li><li>当编码不一致时，根据网页源代码的标注信息<code>charset=gb2312</code>进行修正： <code>resp.encoding = &quot;gb2312&quot;</code></li><li><code>verify=False</code>去除安全认证</li><li>拼接域名时要注意<code>/</code>数量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.获取主页源码</span></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain, verify=<span class="literal">False</span>)  <span class="comment"># 去除安全认证</span></span><br><span class="line">resp.encoding = <span class="string">&quot;gb2312&quot;</span>  <span class="comment"># 修改成指定字符集</span></span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定位2021必看片板块</span></span><br><span class="line">rule1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2021必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class="line">result1 = rule1.search(resp.text)</span><br><span class="line">ul = result1.group(<span class="string">&quot;ul&quot;</span>).strip()</span><br><span class="line"><span class="comment"># print(ul)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.从板块中提取子页面的链接地址</span></span><br><span class="line">rule2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;href=&#x27;(?P&lt;href&gt;.*?)&#x27;&quot;</span>, re.S)</span><br><span class="line">result2 = rule2.finditer(ul)</span><br><span class="line">child_href_list = []</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> result2:</span><br><span class="line">    child_href = domain + h.group(<span class="string">&quot;href&quot;</span>).strip(<span class="string">&quot;/&quot;</span>)  <span class="comment"># domain中也有/，去掉一个</span></span><br><span class="line">    child_href_list.append(child_href)</span><br><span class="line">    <span class="comment"># print(child_href)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.请求子页面地址，拿到下载地址</span></span><br><span class="line">rule3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;meta name=keywords content=&quot;(?P&lt;name&gt;.*?)下载&quot;&gt;.*?&#x27;</span></span><br><span class="line">                   <span class="string">r&#x27;&lt;td style=&quot;WORD-WRAP: break-word&quot; bgcolor=&quot;#fdfddf&quot;&gt;&lt;a href=&quot;(?P&lt;download&gt;.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line">download_list = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> child_href_list:</span><br><span class="line">    child_resp = requests.get(c, verify=<span class="literal">False</span>)  <span class="comment"># 去除安全认证</span></span><br><span class="line">    child_resp.encoding = <span class="string">&quot;gb2312&quot;</span>  <span class="comment"># 修改成指定字符集</span></span><br><span class="line">    result3 = rule3.search(child_resp.text)</span><br><span class="line">    download_list[result3.group(<span class="string">&quot;name&quot;</span>)] = result3.group(<span class="string">&quot;download&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> download_list.items():</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><h2 id="Bs4模块-Beautiful-Soup"><a href="#Bs4模块-Beautiful-Soup" class="headerlink" title="Bs4模块(Beautiful Soup)"></a>Bs4模块(Beautiful Soup)</h2><h3 id="html语法规则"><a href="#html语法规则" class="headerlink" title="html语法规则"></a>html语法规则</h3><p>HTML(Hyper Text Markup Language)超文本标记语言，是我们编写网页的最基本也是最核心的⼀种语⾔，其语法规则就是用不同的标签对网页上的内容进行标记，从⽽使网页显示出不同的展示效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种标记--&gt;</span></span><br><span class="line">&lt;标签 </span><br><span class="line">    属性=&quot;值&quot; </span><br><span class="line">    属性=&quot;值&quot;&gt;</span><br><span class="line">    被标记的内容</span><br><span class="line">&lt;/标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种标记--&gt;</span></span><br><span class="line">&lt;标签 属性=&quot;值&quot; </span><br><span class="line">    属性=&quot;值&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>通过网页源码建立<code>BeautifulSoup</code>对象，来检索页面源代码中的html标签。</p><ul><li><code>find(标签, 属性=值)</code>  只找一个</li><li><code>find_all(标签, 属性=值)</code>  找出所有</li></ul><h3 id="实战案例-1"><a href="#实战案例-1" class="headerlink" title="实战案例"></a>实战案例</h3><h4 id="新发地菜价"><a href="#新发地菜价" class="headerlink" title="新发地菜价"></a>新发地菜价</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.xinfadi.com.cn/marketanalysis/0/list/1.shtml&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;菜价.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 把页面源代码交给BeautifulSoup进行处理, 生成bs对象</span></span><br><span class="line">page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 指定html解析器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从bs对象中查找数据，找到目标表格</span></span><br><span class="line">attrs = &#123;</span><br><span class="line">    <span class="string">&quot;class&quot;</span>: <span class="string">&quot;hq_table&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">table = page.find(<span class="string">&quot;table&quot;</span>, attrs=attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 拿到有效的数据行</span></span><br><span class="line">trs = table.find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 对每行数据分解属性</span></span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">    tds = tr.find_all(<span class="string">&quot;td&quot;</span>)  <span class="comment"># 拿到每行中的td</span></span><br><span class="line">    name = tds[<span class="number">0</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    low = tds[<span class="number">1</span>].text</span><br><span class="line">    avg = tds[<span class="number">2</span>].text</span><br><span class="line">    high = tds[<span class="number">3</span>].text</span><br><span class="line">    spec = tds[<span class="number">4</span>].text  <span class="comment"># 规格</span></span><br><span class="line">    unit = tds[<span class="number">5</span>].text  <span class="comment"># 单位</span></span><br><span class="line">    day = tds[<span class="number">6</span>].text  <span class="comment"># 发布日期</span></span><br><span class="line">    print(name, low, avg, high, spec, unit, day)</span><br><span class="line">    csv_writer.writerow([name, low, avg, high, spec, unit, day])</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li><p>这里通过URL可以发现</p></li><li><p>规避Python关键字属性的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">table = page.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;hq_table&quot;</span>)</span><br><span class="line">table = page.find(<span class="string">&quot;table&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;hq_table&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="优美图库"><a href="#优美图库" class="headerlink" title="优美图库"></a>优美图库</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span></span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line">resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析主页面</span></span><br><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">a_list = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;TypeList&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    href = url + a.get(<span class="string">&quot;href&quot;</span>).split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]  <span class="comment"># 手动拼接url</span></span><br><span class="line">    <span class="comment"># print(href)</span></span><br><span class="line">    child_page_resp = requests.get(href)</span><br><span class="line">    child_page_resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    <span class="comment"># 解析子界面</span></span><br><span class="line">    child_page = BeautifulSoup(child_page_resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    p = child_page.find(<span class="string">&quot;p&quot;</span>, align=<span class="string">&quot;center&quot;</span>)  <span class="comment"># 找到标签为p、居中对齐的超文本</span></span><br><span class="line">    img = p.find(<span class="string">&quot;img&quot;</span>)  <span class="comment"># 找到标签为img的超文本</span></span><br><span class="line">    src = img.get(<span class="string">&quot;src&quot;</span>)  <span class="comment"># 取出src属性的值</span></span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    img_resp = requests.get(src)  <span class="comment"># 该响应文件本身就是图片</span></span><br><span class="line">    img_name = src.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]  <span class="comment"># 设定文件名</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;source/&quot;</span> + img_name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img_resp.content)  <span class="comment"># 将拿到的响应内容以字节流形式写入文件</span></span><br><span class="line">    print(img_name + <span class="string">&quot; has been downloaded!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h2><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p>XPath是一门在 XML 文档中查找信息的语言。XPath可⽤来在 XML文档中对元素和属性进行遍历，而我们熟知的HTML恰巧属于XML的⼀个⼦集，所以完全可以用Xpath去查找html中的内容。</p><ul><li>demo1：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;book&gt;</span></span><br><span class="line"><span class="string">    &lt;id&gt;1&lt;/id&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;野花遍地⾹&lt;/name&gt;</span></span><br><span class="line"><span class="string">    &lt;price&gt;1.23&lt;/price&gt;</span></span><br><span class="line"><span class="string">    &lt;nick&gt;臭⾖腐&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;author&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10086&quot;&gt;周⼤强&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10010&quot;&gt;周芷若&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;joy&quot;&gt;周杰伦&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;jolin&quot;&gt;蔡依林&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;惹了&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/author&gt;</span></span><br><span class="line"><span class="string">    &lt;partner&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppc&quot;&gt;胖胖陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppbc&quot;&gt;胖胖不陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;/partner&gt;</span></span><br><span class="line"><span class="string">&lt;/book&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = etree.XML(xml)</span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book&quot;</span>)  <span class="comment"># [&lt;Element book at 0x26943009048&gt;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/name&quot;</span>)  <span class="comment"># [&lt;Element name at 0x2403a5ffb48&gt;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/name/text()&quot;</span>)  <span class="comment"># [&#x27;野花遍地⾹&#x27;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/nick&quot;</span>)  <span class="comment"># [&lt;Element nick at 0x2702b1dfb08&gt;, ……, &lt;Element nick at 0x2702b3516c8&gt;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/nick/text()&quot;</span>)  <span class="comment"># [&#x27;周⼤强&#x27;, &#x27;周芷若&#x27;, &#x27;周杰伦&#x27;, &#x27;蔡依林&#x27;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/div/nick/text()&quot;</span>)  <span class="comment"># [&#x27;惹了&#x27;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author//nick/text()&quot;</span>)  <span class="comment"># 任意层后代 [&#x27;周⼤强&#x27;, &#x27;周芷若&#x27;, &#x27;周杰伦&#x27;, &#x27;蔡依林&#x27;, &#x27;惹了&#x27;]</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/*/nick/text()&quot;</span>)  <span class="comment"># 单层通配符 [&#x27;惹了&#x27;]</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ul><li>demo2：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;my_html.html&quot;</span>)</span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ul/li/a/text()&quot;</span>)  <span class="comment"># [&#x27;百度&#x27;, &#x27;⾕歌&#x27;, &#x27;搜狗&#x27;]  使用开发者工具快速定位xpath</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ul/li[1]/a/text()&quot;</span>)  <span class="comment"># [&#x27;百度&#x27;]  从1开始计数</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;</span>)  <span class="comment"># [&#x27;⼤炮&#x27;]  属性筛选</span></span><br><span class="line">result_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">    r1 = result.xpath(<span class="string">&quot;./a/text()&quot;</span>)</span><br><span class="line">    print(r1)  <span class="comment"># ./ 当前位置</span></span><br><span class="line">    r2 = result.xpath(<span class="string">&quot;./a/@href&quot;</span>)</span><br><span class="line">    print(r2)  <span class="comment"># @ 提取属性值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开发者工具使用技巧"><a href="#开发者工具使用技巧" class="headerlink" title="开发者工具使用技巧"></a>开发者工具使用技巧</h3><ul><li>快速定位网页资源在HTML中的位置</li></ul><p><img src="/2021/05/%E7%88%AC%E8%99%ABPart2/image-20210602214418408.png" alt="image-20210602214418408"></p><ul><li>快速获取XPath，并做一些微调</li></ul><p><img src="/2021/05/%E7%88%AC%E8%99%ABPart2/image-20210602214849284.png" alt="image-20210602214849284"></p><h3 id="实战案例-2"><a href="#实战案例-2" class="headerlink" title="实战案例"></a>实战案例</h3><h4 id="猪八戒网"><a href="#猪八戒网" class="headerlink" title="猪八戒网"></a>猪八戒网</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;猪八戒.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得主页面</span></span><br><span class="line">url = <span class="string">&quot;https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&quot;</span></span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line">divs = html.xpath(<span class="string">&quot;/html/body/div[6]/div/div/div[2]/div[5]/div[1]/div&quot;</span>)  <span class="comment"># 先定位到div[1]，然后改成div</span></span><br><span class="line"><span class="comment"># 每一个服务商</span></span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    price = div.xpath(<span class="string">&#x27;./div/div/a[1]/div[2]/div[1]/span[1]/text()&#x27;</span>)[<span class="number">0</span>].strip(<span class="string">&quot;¥&quot;</span>)  <span class="comment"># 使用工具定位完整xpath，然后将重复地址替换./</span></span><br><span class="line">    title = <span class="string">&quot;SAAS&quot;</span>.join(div.xpath(<span class="string">&#x27;./div/div/a[1]/div[2]/div[2]/p/text()&#x27;</span>))  <span class="comment"># join()通过指定字符连接序列中元素，生成新字符串</span></span><br><span class="line">    company_name = div.xpath(<span class="string">&#x27;./div/div/a[2]/div[1]/p/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    location = div.xpath(<span class="string">&quot;./div/div/a[2]/div[1]/div/span/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    csv_writer.writerow([price, title, company_name, location])</span><br><span class="line">    print([price, title, company_name, location])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数据解析与提取</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫Part1</title>
    <link href="https://nephrencake.gitee.io/2021/05/%E7%88%AC%E8%99%ABPart1/"/>
    <id>https://nephrencake.gitee.io/2021/05/%E7%88%AC%E8%99%ABPart1/</id>
    <published>2021-05-18T06:12:21.000Z</published>
    <updated>2021-06-03T15:32:21.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫Part1——原理与request入门"><a href="#爬虫Part1——原理与request入门" class="headerlink" title="爬虫Part1——原理与request入门"></a>爬虫Part1——原理与request入门</h1><p>[TOC]</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>爬虫：模拟浏览器抓取网站资源。</p><p>爬⾍在法律上是不被禁⽌的，但是也具有违法⻛险。因此使用爬虫我们要做到：</p><ul><li>不能影响⽹站的正常运营</li><li>不能窃取⽤户隐私和商业机密等敏感内容</li><li>遵循 robots.txt 协议</li></ul><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line"></span><br><span class="line">print(resp)  <span class="comment"># 响应地址 &lt;http.client.HTTPResponse object at 0x00000174ADF4F128&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;my_baidu.html&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 写入保存网页源代码</span></span><br><span class="line">    f.write(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># resp不能read()两次</span></span><br></pre></td></tr></table></figure><ul><li>在win10中必须加上 utf-8，否则使用环境默认值 gbk</li><li>网页本质就是html文件</li><li>在网页源码中有标记解码方式</li></ul><blockquote><p>使用edge要在 <a href="https://msedgewebdriverstorage.z22.web.core.windows.net/">官网</a> 下载对应版本的driver，pycharm中用浏览器打开地址都使用driver：</p><p>driver放在python根目录下：D:\Programming Kits\Python36\msedgedriver.exe</p><p>edge默认在：C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe</p></blockquote><h2 id="Web请求过程解析"><a href="#Web请求过程解析" class="headerlink" title="Web请求过程解析"></a>Web请求过程解析</h2><p>网页上所有的数据不一定全在页面源代码中，这关系到常⻅的两种⻚⾯渲染过程：</p><ol><li><p>服务器渲染</p><p>在请求到服务器的时候，服务器直接把数据全部写入到html中，因此我们能直接拿到带有数据的html内容，我们能看到的数据都在页面源代码中能找的到。</p></li><li><p>前端JS渲染</p><p>这种机制⼀般是第⼀次请求服务器返回基本的HTML框架结构，然后再次请求到数据库服务器，由这个服务器返回数据，最后在浏览器上对数据进⾏加载。</p><p>这便对应异步请求，在我们进行页面滚动时，浏览器向服务器发送数据请求。</p><p>这样做的好处是服务器缓解压力，而且分工明确，容易维护。</p></li></ol><p>两种渲染对于爬虫都各有利弊。</p><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><p>协议：就是两个计算机之间为了能够流畅的进⾏沟通⽽设置的⼀个协定。常⻅的协议有TCP/IP、SOAP协议、HTTP协议、SMTP协议等等…..</p><ul><li>HTTP协议，超⽂本传输协议（Hyper Text Transfer Protocol）的缩写，是⽤于从万维⽹（WWW：World Wide Web）服务器传输超⽂本到本地浏览器的传送协议。</li><li>HTTP协议把⼀条消息分为三⼤块内容。</li></ul><p>请求：</p><ul><li>请求行 -&gt; 请求方式（method:get/post）、请求地址（authority:url）、协议（scheme:https）、浏览器接受数据的要求（accept:）</li><li>请求头 -&gt; 服务器要使用的附加信息（cookie），设备和浏览器信息（user-agent:）</li><li>请求体 -&gt; 请求参数</li></ul><p>响应：</p><ul><li>状态⾏ -&gt; 协议、状态码（200请求成功/404页面不存在/500服务器崩溃/302重定向）</li><li>响应头 -&gt; 客户端要使⽤的附加信息</li><li>响应体 -&gt; 服务器返回客户端真正要⽤的内容（HTML、json等）</li></ul><p>写爬⾍的时候要格外注意请求头和响应头，这两个地⽅⼀般都隐含着⼀些⽐较重要的内容。</p><p><img src="/2021/05/%E7%88%AC%E8%99%ABPart1/image-20210519182940008.png" alt="image-20210519182940008"></p><p>请求头中最常⻅的⼀些重要内容（爬⾍需要）:</p><ol><li><p>User-Agent：请求载体的身份标识（用啥发送的请求）</p></li><li><p>Referer：防盗链（这次请求是从哪个页面来的，反爬会⽤到）</p></li><li><p>cookie：本地字符串数据信息（用户登录信息，反爬的token）</p></li></ol><p>响应头中⼀些重要的内容:</p><ol><li><p>cookie</p></li><li><p>各种神奇的莫名其妙的字符串（⼀般都是token字样, 防止各种攻击和反爬）</p></li></ol><p>请求⽅式：</p><ol><li>GET：显式提交。主要从服务器获取数据</li><li>POST：隐式提交。主要向服务器传送数据</li></ol><blockquote><p>如果请求的方式是get或head，则只发送消息头到服务器；如果是post请求，那么消息体（网页表单内容）和消息头都将传送到服务器。因此，用get速度更快，但由于url暴露在用户面前，可能导致sql注入等非法攻击； 用post提交，速度会慢一些，但是由于url是隐藏在了表单中，所以安全性会好一点。这就是为什么，一般登录页面都用post提交而不用get提交。</p></blockquote><h2 id="request入门"><a href="#request入门" class="headerlink" title="request入门"></a>request入门</h2><h3 id="GET显式提交"><a href="#GET显式提交" class="headerlink" title="GET显式提交"></a>GET显式提交</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;Python&quot;</span></span><br><span class="line">url = <span class="string">f&quot;https://www.baidu.com/s?wd=<span class="subst">&#123;query&#125;</span>&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;your-user-agent&quot;</span></span><br><span class="line">&#125;  <span class="comment"># 设置user-agent以处理反爬</span></span><br><span class="line">reps = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">print(reps)  <span class="comment"># &lt;Response [200]&gt;</span></span><br><span class="line"><span class="comment"># print(reps.text)  # 页面源代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Python.html&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(reps.text)</span><br></pre></td></tr></table></figure><ul><li>地址栏链接统一都是GET方式</li></ul><h3 id="POST隐式提交"><a href="#POST隐式提交" class="headerlink" title="POST隐式提交"></a>POST隐式提交</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line">kw = <span class="string">&quot;dog&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;kw&quot;</span>: kw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=data)</span><br><span class="line">print(resp.json())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;errno&#x27;: 0,</span></span><br><span class="line"><span class="string"> &#x27;data&#x27;: [&#123;&#x27;k&#x27;: &#x27;dog&#x27;, &#x27;v&#x27;: &#x27;n. 狗; 蹩脚货; 丑女人; 卑鄙小人 v. 困扰; 跟踪&#x27;&#125;, </span></span><br><span class="line"><span class="string">          &#123;&#x27;k&#x27;: &#x27;DOG&#x27;, &#x27;v&#x27;: &#x27;abbr. Data Output Gate 数据输出门&#x27;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&#x27;k&#x27;: &#x27;doge&#x27;, &#x27;v&#x27;: &#x27;n. 共和国总督&#x27;&#125;, </span></span><br><span class="line"><span class="string">          &#123;&#x27;k&#x27;: &#x27;dogm&#x27;, &#x27;v&#x27;: &#x27;abbr. dogmatic 教条的; 独断的; dogmatism 教条主义; dogmatist&#x27;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&#x27;k&#x27;: &#x27;Dogo&#x27;, &#x27;v&#x27;: &#x27;[地名] [马里、尼日尔、乍得] 多戈; [地名] [韩国] 道高&#x27;&#125;]</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>对于像翻译这种发送请求才能接收数据的使用post，并且要注意请求的url。</li><li>一般第二次请求都是Type：xhr</li></ul><h3 id="带参数的get请求"><a href="#带参数的get请求" class="headerlink" title="带参数的get请求"></a>带参数的get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&quot;user-agent&quot;</span>, </span><br><span class="line">    <span class="string">&#x27;Keep-Alive&#x27;</span>: <span class="string">&#x27;timeout=30&#x27;</span>  <span class="comment"># 或者&#x27;false&#x27;用来关闭连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, params=params, headers=headers)</span><br><span class="line">print(resp.request.url)  <span class="comment"># 带参数的网址</span></span><br><span class="line">print(resp.request.headers[<span class="string">&quot;user-agent&quot;</span>])  <span class="comment"># python-requests/2.25.1  大小写不敏感</span></span><br><span class="line">print(resp.json())</span><br><span class="line"><span class="comment"># resp.close()  # 关闭连接</span></span><br></pre></td></tr></table></figure><ul><li>url地址的 ‘?’ 后面是get请求的参数（query string parameter）</li><li>python模拟的user-agent为：python-requests/2.25.1</li><li>一般出现问题，首先检查headers的user-agent</li></ul>]]></content>
    
    
    <summary type="html">原理与request入门</summary>
    
    
    
    <category term="爬虫" scheme="https://nephrencake.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础-完结目录</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80-%E5%AE%8C%E7%BB%93%E7%9B%AE%E5%BD%95/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80-%E5%AE%8C%E7%BB%93%E7%9B%AE%E5%BD%95/</id>
    <published>2021-04-27T03:03:25.000Z</published>
    <updated>2021-06-05T08:43:57.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础——完结目录"><a href="#Docker基础——完结目录" class="headerlink" title="Docker基础——完结目录"></a>Docker基础——完结目录</h1><p>教程视频传送门：</p><ol><li><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">【狂神说Java】Docker最新超详细版教程通俗易懂</a></li></ol><p>讲的通俗易懂，循序渐进，但是需要自己过后再重新梳理一遍、详细总结。</p><p>==part2、part6还有Nginx、Tomcat、ES+Kibana、Redis、springboot部署==</p><table><thead><tr><th align="center"><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/">DockerPart1——概述</a></th></tr></thead><tbody><tr><td align="center"><strong><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part2/">DockerPart2——基本命令</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/">Docker基础Part3——镜像讲解</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part4/">Docker基础Part4——数据卷</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part5/">Docker基础Part5——DockerFlie</a></strong></td></tr><tr><td align="center"><strong><a href="/2021/04/Docker%E5%9F%BA%E7%A1%80Part6/">Docker基础Part6——Docker网络</a></strong></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Docker基础-完结目录</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Docker" scheme="https://nephrencake.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础Part6</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part6/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part6/</id>
    <published>2021-04-25T12:09:30.000Z</published>
    <updated>2021-06-03T15:11:22.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part6——Docker网络"><a href="#Docker基础Part6——Docker网络" class="headerlink" title="Docker基础Part6——Docker网络"></a>Docker基础Part6——Docker网络</h1><p>[TOC]</p><h2 id="Docker0"><a href="#Docker0" class="headerlink" title="Docker0"></a>Docker0</h2><h3 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth-pair"></a>veth-pair</h3><p><a href="https://www.cnblogs.com/bakari/p/10613710.html">https://www.cnblogs.com/bakari/p/10613710.html</a></p><ul><li>只要安装了docker，就会有docker0桥接模式，使用的是veth-pair技术。</li><li>veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连。</li><li>OpenStac、Docker容器之间的连接、OVS的连接，都是使用evth-pair技术。</li></ul><h3 id="主机与容器的网络"><a href="#主机与容器的网络" class="headerlink" title="主机与容器的网络"></a>主机与容器的网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看主机网络地址</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo  <span class="comment"># lo 本机回环地址</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:23:6f:89 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.1.14/20 brd 172.17.15.255 scope global eth0 <span class="comment"># eth0 阿里云内网地址</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5054:ff:fe23:6f89/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:76:5e:c5:42 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0  <span class="comment"># docker0 docker地址</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:76ff:fe5e:c542/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 2.运行Tomcat</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看容器内网络地址</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">582: eth0@if583: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 4.在Linux主机可以ping通容器</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># ping 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.049 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.每次启动一个容器就会多一对网卡，给docker容器分配一个ip</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat02 tomcat</span></span><br><span class="line">bb207d673d6b6a3b0898494d23850d87d852263b8c612b9788533fd3978bcdff</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat02 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">584: eth0@if585: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">......</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">......</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">......</span><br><span class="line">583: veth10795dd@if582: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether e6:83:7d:be:d2:57 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::e483:7dff:febe:d257/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">585: veth3c80d43@if584: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 92:75:28:4c:a7:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::9075:28ff:fe4c:a702/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="容器之间的网络互通"><a href="#容器之间的网络互通" class="headerlink" title="容器之间的网络互通"></a>容器之间的网络互通</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.获取tomcat01的ip 172.17.0.2   </span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat01 ip addr  </span></span><br><span class="line">550: eth0@if551: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.用tomcat02 ping通 tomcat01</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat02 ping 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.051 ms</span><br></pre></td></tr></table></figure><h3 id="docker内网结构"><a href="#docker内网结构" class="headerlink" title="docker内网结构"></a>docker内网结构</h3><ul><li>所有的 docker 容器在不指定网络的情况下，都是由 docker0 使用Linux虚拟化技术、充当虚拟内网的路由/桥接，由 docker0 给容器分配一个可用ip，并由veth-pair连接，直到容器删除。</li><li>Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件）。</li><li>路由上发送信息可以通过两种方法：1.对每一个设备都进行注册；2.进行广播，看谁进行了回应。</li></ul><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part6/image-20210427082646681.png" alt="image-20210427082646681"></p><h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><h3 id="–link-使用"><a href="#–link-使用" class="headerlink" title="–link 使用"></a>–link 使用</h3><p>为了保证数据ip更换时，项目不需要重启，并且通过名字来访问容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.在未使用 --link 时，不能使用名字ping通</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat02 ping tomcat01</span></span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用--link连接tomcat02、tomcat03</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat03 --link tomcat02 tomcat</span></span><br><span class="line">16d977fe6d16ffd3e7e813e2487a55c9d52319a2c94c967fe3eed85f26078fd8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.可以单向ping通</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=1 ttl=64 time=0.081 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=3 ttl=64 time=0.053 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.对于没有进行配置的容器，不能与其他容器直接ping通</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat02 ping tomcat03</span></span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><h3 id="–link-原理"><a href="#–link-原理" class="headerlink" title="–link 原理"></a>–link 原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看总体网络</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">c49bd3c9074e   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">7137f78f9152   host      host      <span class="built_in">local</span></span><br><span class="line">830f9dcb1238   none      null      <span class="built_in">local</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network inspect c49bd3c9074e</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;c49bd3c9074eccb131f580ae87a0f639459d8fbfb6106ff16d95de982f955cb6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-04-20T21:44:51.886039709+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.18.0.0/16&quot;</span>,  <span class="comment"># 局域网</span></span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>  <span class="comment"># docker0地址</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;  <span class="comment"># 三个tomcat地址</span></span><br><span class="line">            <span class="string">&quot;16d977fe6d16ffd3e7e813e2487a55c9d52319a2c94c967fe3eed85f26078fd8&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;5a5630f2d5c897c1d9c36c9fef6df14885c381bdd5bd3bb38c1936335b65ccef&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.4/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;35806ff980cd8d16855934bceaacc02a6b99d50efeb9c9ff078ae43027c1ffbc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;fda00eb71c90561f15bdfd6c535411e7d38830c82315c747ac806b6369dcd623&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;bb207d673d6b6a3b0898494d23850d87d852263b8c612b9788533fd3978bcdff&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;33d04884bfec102e7b8d1ac0985a60636c2766c4e4aebcc68bc8d766ec13c037&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器网络</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                         NAMES</span><br><span class="line">16d977fe6d16   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   11 minutes ago   Up 11 minutes   0.0.0.0:49158-&gt;8080/tcp, :::49158-&gt;8080/tcp   tomcat03</span><br><span class="line">bb207d673d6b   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   16 hours ago     Up 16 hours     0.0.0.0:49156-&gt;8080/tcp, :::49156-&gt;8080/tcp   tomcat02</span><br><span class="line">35806ff980cd   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   17 hours ago     Up 17 hours     0.0.0.0:49155-&gt;8080/tcp, :::49155-&gt;8080/tcp   tomcat01</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker inspect 16d977fe6d16</span></span><br><span class="line">......</span><br><span class="line">        <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="string">&quot;Links&quot;</span>: [  <span class="comment"># 绑定的容器连接信息</span></span><br><span class="line">                <span class="string">&quot;/tomcat02:/tomcat03/tomcat02&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            ......</span><br><span class="line">         &#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.18.0.3tomcat02 bb207d673d6b  <span class="comment"># 添加了对tomcat02的解析映射</span></span><br><span class="line">172.18.0.416d977fe6d16</span><br></pre></td></tr></table></figure><blockquote><p>现在Docker不建议使用–link，以及官方提供的docker0，因为不支持容器名连接访问，较为局限，而是使用自定义网络。</p></blockquote><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><h3 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker network [ <span class="built_in">command</span> ]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br></pre></td></tr></table></figure><h3 id="网络信息解释"><a href="#网络信息解释" class="headerlink" title="网络信息解释"></a>网络信息解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">c49bd3c9074e   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">7137f78f9152   host      host      <span class="built_in">local</span></span><br><span class="line">830f9dcb1238   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><ul><li>bridge ：桥接 docker（默认，自定义也使用bridge）</li><li>none ：不配置网络，一般不用</li><li>host ：和主机共享网络</li><li>container ：容器网络连通（局限大，用得少）</li></ul><h3 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.默认--net bridge，bridge就是docker0。因此以下两者等效</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.自定义一个网络</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line">1144482c2ac35e85b348c18a0038fe93c9fd871bcb83612beea9c1a272589596</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">c49bd3c9074e   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">7137f78f9152   host      host      <span class="built_in">local</span></span><br><span class="line">1144482c2ac3   mynet     bridge    <span class="built_in">local</span></span><br><span class="line">830f9dcb1238   none      null      <span class="built_in">local</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;1144482c2ac35e85b348c18a0038fe93c9fd871bcb83612beea9c1a272589596&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-04-27T10:25:16.077076141+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在自定义网络下启动Tomcat</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat-net-01 --net mynet tomcat</span></span><br><span class="line">8efc7a929482e82d74f723d2af17f77560b53561752fc1aab50d0189e06d7237</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat-net-02 --net mynet tomcat</span></span><br><span class="line">6ccb4239abcfda10aa1b463d2f44d4a9ca4bc312735b56d08cad55266545ce2a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试可以使用容器名直接ping通</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it tomcat-net-01 ping tomcat-net-02</span></span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.056 ms</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>不同的集群使用不同的网络，保证集群是互相隔离并且安全的。</li></ul><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker network connect --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --<span class="built_in">alias</span> strings           Add network-scoped <span class="built_in">alias</span> <span class="keyword">for</span> the container</span><br><span class="line">      --driver-opt strings      driver options <span class="keyword">for</span> the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address <span class="keyword">for</span> the container</span><br></pre></td></tr></table></figure><h3 id="容器与不同网段的连通"><a href="#容器与不同网段的连通" class="headerlink" title="容器与不同网段的连通"></a>容器与不同网段的连通</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.测试两个不同的网络连通 ：再启动两个 tomcat 并使用默认网络 docker0</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line">0ad36e6d140040e1c6324695f6fe7102f8857b28b6251a6a21f8e4f8eb88839d</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -P --name tomcat02 tomcat</span></span><br><span class="line">aa8836b5fe93c9437490deb86796cc9d2d12d051df7ffc74b5b618b89c094a95</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.此时tomcat01与tomcat-net-01不能ping通</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec tomcat01 ping tomcat-net-01</span></span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.连通容器与不同网段</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network connect mynet tomcat01</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker network inspect mynet </span></span><br><span class="line">......</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;0ad36e6d140040e1c6324695f6fe7102f8857b28b6251a6a21f8e4f8eb88839d&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat01&quot;</span>,  <span class="comment"># 连通子网与不在此子网的容器，就是把容器加入到此子网的配置中</span></span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a2f785c266adf679b186367e95cdcc48cc6c976b02b693de43100a625a6ca251&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.4/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;6ccb4239abcfda10aa1b463d2f44d4a9ca4bc312735b56d08cad55266545ce2a&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;4e03b4f4fd3e11254ad5a5b3b1d1a6e4e8d5d9088eeb7be5e371875bb9885fa6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;8efc7a929482e82d74f723d2af17f77560b53561752fc1aab50d0189e06d7237&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;07427902cf0a5d5c1f72971ccf0615b0155eae830da1811b5e74e55226256d59&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试连接成功</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec tomcat01 ping tomcat-net-01</span></span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><ul><li>子网跟子网不能连通，但是容器和所在以外的子网能够连通。</li><li>一个容器具备多个ip，以访问不同网段。</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=38">Redis集群部署</a></p><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=39">springboot以服务打包镜像</a></p>]]></content>
    
    
    <summary type="html">Docker基础Part6</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础Part5</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part5/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part5/</id>
    <published>2021-04-25T00:54:39.000Z</published>
    <updated>2021-06-03T15:11:08.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part5——DockerFlie"><a href="#Docker基础Part5——DockerFlie" class="headerlink" title="Docker基础Part5——DockerFlie"></a>Docker基础Part5——DockerFlie</h1><p>[TOC]</p><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><p>Dockerfile 是面向开发的，Docker镜像逐渐成为企业交付、发布项目的标准。</p><p>构建步骤：</p><ol><li>编写 dockerfile 文件</li><li>docker build 构建镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像（DockerHub 、阿里云仓库）</li></ol><blockquote><p>每一个指令都会创建一个新的镜像层并提交。</p></blockquote><h2 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM<span class="comment"># 基础镜像，一切从这里开始构建</span></span><br><span class="line">MAINTAINER<span class="comment"># 镜像是谁写的， 姓名+邮箱</span></span><br><span class="line">RUN<span class="comment"># 镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD<span class="comment"># 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span></span><br><span class="line">WORKDIR<span class="comment"># 镜像的工作目录</span></span><br><span class="line">VOLUME<span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOSE<span class="comment"># 开放端口配置</span></span><br><span class="line">CMD<span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</span></span><br><span class="line">ENTRYPOINT<span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span><br><span class="line">ONBUILD<span class="comment"># 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。</span></span><br><span class="line">COPY<span class="comment"># 类似ADD，将我们文件拷贝到镜像中</span></span><br><span class="line">ENV<span class="comment"># 构建的时候设置环境变量</span></span><br></pre></td></tr></table></figure><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><ul><li>DockerHub中大部分镜像都是从<code>FROM scratch</code>开始。</li><li>关键字不一定要大写，但是一般都是大写来和变量区分。</li></ul><p>官方的centos镜像没有<code>vim、ifconfig</code>命令，这里制作自己的centos镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编写Dockerfile文件</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># vim mydockerfile_centos </span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># cat mydockerfile_centos </span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER NephrenCake&lt;834957063@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WOKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">run yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构建镜像</span></span><br><span class="line"><span class="comment"># 命令 docker build -f 文件路径 -t 镜像名:[tag] 目标路径</span></span><br><span class="line">docker build -f mydockerfile_centos -t mycentos:0.1 .  <span class="comment"># &lt;-注意这里的一个“.”表示镜像文件生成在当前目录</span></span><br><span class="line">......</span><br><span class="line">Successfully built 0fb03cb15b56</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.测试运行</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker run -it mycentos:0.1 /bin/bash</span></span><br><span class="line">[root@6db4033677cd <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>  <span class="comment"># 进入设置的工作目录</span></span><br><span class="line">[root@6db4033677cd <span class="built_in">local</span>]<span class="comment"># ifconfig</span></span><br><span class="line">......  <span class="comment"># ifconfig 可以正常使用</span></span><br><span class="line">[root@6db4033677cd <span class="built_in">local</span>]<span class="comment"># vim --version</span></span><br><span class="line">......  <span class="comment"># vim 可以正常使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看构建过程</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker history mycentos:0.1</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">0fb03cb15b56   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B        </span></span><br><span class="line">857a02979c6b   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span></span><br><span class="line">9b1d90e765f1   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span></span><br><span class="line">383a1fdc4420   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B        </span></span><br><span class="line">315a1c8eafe2   25 minutes ago   /bin/sh -c yum -y install net-tools             23.3MB    </span><br><span class="line">1bd3533bf951   25 minutes ago   /bin/sh -c yum -y install vim                   58MB      </span><br><span class="line">e7468e6156a1   26 minutes ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /usr/local            0B        </span></span><br><span class="line">02c89bb6f0d5   26 minutes ago   /bin/sh -c <span class="comment">#(nop)  ENV MYPATH=/usr/local        0B        </span></span><br><span class="line">1e2c46d0633d   26 minutes ago   /bin/sh -c <span class="comment">#(nop)  MAINTAINER NephrenCake&lt;83…   0B        </span></span><br><span class="line">300e315adb2f   4 months ago     /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span></span><br><span class="line">&lt;missing&gt;      4 months ago     /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B        </span></span><br><span class="line">&lt;missing&gt;      4 months ago     /bin/sh -c <span class="comment">#(nop) ADD file:bd7a2aed6ede423b7…   209MB</span></span><br></pre></td></tr></table></figure><ul><li>建议在dockerfile所在目录构建镜像。</li><li>对所有拿到的镜像都可以<code>docker history</code>来分析其构建过程。</li></ul><h2 id="CMD-和-ENTRYPOINT区别"><a href="#CMD-和-ENTRYPOINT区别" class="headerlink" title="CMD 和 ENTRYPOINT区别"></a>CMD 和 ENTRYPOINT区别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD<span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</span></span><br><span class="line">ENTRYPOINT<span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span><br></pre></td></tr></table></figure><p>test CMD：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编写dockerfile文件</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># vim dockerfile-test-cmd</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构建镜像</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.运行镜像</span></span><br><span class="line">$ docker run cmd-test:0.1</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">......  <span class="comment"># 成功执行设置的cmd指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.意图追加命令  -l 成为ls -al</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker run cmd-test:0.1 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="string">&quot;exec: \&quot;-l\&quot;:</span></span><br><span class="line"><span class="string"> executable file not found in <span class="variable">$PATH</span>&quot;</span>: unknown.</span><br><span class="line">ERRO[0000] error waiting <span class="keyword">for</span> container: context canceled </span><br><span class="line"><span class="comment"># cmd的情况下 `-l` 替换了 `CMD[&quot;ls&quot;,&quot;-a&quot;]` ，而 `-l` 不是命令所以报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.修正：</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker run cmd-test:0.1 ls -l</span></span><br><span class="line">total 48</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 Apr 25 03:10 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Apr 25 03:09 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 home</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.没有停留在容器的原因是执行完cmd指令自动退出了</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND   CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">9ce9877f6610   cmd-test:0.1   <span class="string">&quot;ls -l&quot;</span>   11 seconds ago   Exited (0) 10 seconds ago             interesting_knuth</span><br></pre></td></tr></table></figure><p>test ENTRYPOINT：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编写dockerfile文件</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># vim dockerfile-test-entrypoint</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构建镜像</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker build  -f dockerfile-test-entrypoint -t entrypoint-test:0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.运行镜像</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker run entrypoint-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.追加命令</span></span><br><span class="line">[root@VM-1-14-centos dockerfile]<span class="comment"># docker run entrypoint-test:0.1 -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="Tomcat实战"><a href="#Tomcat实战" class="headerlink" title="Tomcat实战"></a>Tomcat实战</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.准备镜像文件</span></span><br><span class="line">Tomcat jdk dockerfile readme</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.编写dockerfile</span></span><br><span class="line">FROM centos <span class="comment">#</span></span><br><span class="line">MAINTAINER cheng&lt;1204598429@qq.com&gt;</span><br><span class="line">COPY README /usr/<span class="built_in">local</span>/README <span class="comment">#复制文件</span></span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/<span class="built_in">local</span>/ <span class="comment">#复制解压</span></span><br><span class="line">ADD apache-tomcat-9.0.35.tar.gz /usr/<span class="built_in">local</span>/ <span class="comment">#复制解压</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span> <span class="comment">#设置环境变量</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span> <span class="comment">#设置工作目录</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_231 <span class="comment">#设置环境变量</span></span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.35 <span class="comment">#设置环境变量</span></span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib <span class="comment">#设置环境变量 分隔符是：</span></span><br><span class="line">EXPOSE 8080 <span class="comment">#设置暴露的端口</span></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.35/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.35/logs/catalina.out <span class="comment"># 设置默认命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.构建image  因为dockerfile命名使用默认命名 因此不用使用-f 指定文件</span></span><br><span class="line">$ docker build -t mytomcat:0.1 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.运行image</span></span><br><span class="line">$ docker run -d -p 8080:8080 --name tomcat01 -v /home/kuangshen/build/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.35/webapps/<span class="built_in">test</span> -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.35/logs mytomcat:0.1</span><br></pre></td></tr></table></figure><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>注册<a href="https://hub.docker.com/">DockerHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker push xxx/image:[镜像版本号]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有前缀默认push到官方的library</span></span><br><span class="line"><span class="comment"># 第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了</span></span><br><span class="line">$ docker build -t nephrencake/mytomcat:1.0 .</span><br><span class="line"><span class="comment"># 第二种 使用docker tag 然后再次push</span></span><br><span class="line">$ docker tag 容器id nephrencake/mytomcat:1.0</span><br></pre></td></tr></table></figure><h3 id="修改版本"><a href="#修改版本" class="headerlink" title="修改版本"></a>修改版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag [ImageId] registry.cn-xxx.aliyuncs.com/xxxx/image:[镜像版本号]</span><br><span class="line"><span class="comment"># 修改id 和 版本</span></span><br><span class="line">$ sudo docker tag a5ef1f32aaae registry.cn-xxx.aliyuncs.com/xxxx/image:1.0</span><br><span class="line"><span class="comment"># 修改仓库镜像版本</span></span><br><span class="line">$ docker push registry.cn-xxx.aliyuncs.com/xxxx/image:[镜像版本号]</span><br></pre></td></tr></table></figure><h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part5/image-20210427110036461.png" alt="image-20210427110036461"></p>]]></content>
    
    
    <summary type="html">Docker基础Part5</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础Part4</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part4/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part4/</id>
    <published>2021-04-24T05:56:17.000Z</published>
    <updated>2021-06-03T15:10:51.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part4——数据卷"><a href="#Docker基础Part4——数据卷" class="headerlink" title="Docker基础Part4——数据卷"></a>Docker基础Part4——数据卷</h1><p>[TOC]</p><h2 id="数据卷是什么"><a href="#数据卷是什么" class="headerlink" title="数据卷是什么"></a>数据卷是什么</h2><p>docker镜像是为了打包应用和环境。</p><ul><li>要防止容器的销毁造成数据的丢失。</li><li>减少不必要进入容器修改配置文件。</li></ul><p>docker容器中产生的数据不应当被存储在容器中，数据应当被同步共享到本机。</p><p>在docker容器中存放数据的文件目录（如：/usr/mysql/）可以挂载到本机的指定目录（如：/home/mysql/），实现数据同步共享。</p><p>多个容器之间依然可以通过上述相同的方式，实现多个容器的数据共享。</p><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part4/image-20210424140857577.png" alt="image-20210424140857577"></p><h2 id="数据卷使用"><a href="#数据卷使用" class="headerlink" title="数据卷使用"></a>数据卷使用</h2><h3 id="指定路径挂载"><a href="#指定路径挂载" class="headerlink" title="指定路径挂载"></a>指定路径挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口</span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -it -v /home/volume:/home centos</span></span><br><span class="line">[root@287b41b8e1eb /]<span class="comment"># cd home</span></span><br><span class="line">[root@287b41b8e1eb home]<span class="comment"># touch test.txt</span></span><br><span class="line">[root@287b41b8e1eb home]<span class="comment"># ls</span></span><br><span class="line">test.txt</span><br><span class="line">[root@VM-1-14-centos volume]<span class="comment"># ls</span></span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><p>容器内与主机内挂载的目录下，所有操作都相互等效。</p><p>即使容器停止、重启、删除，目录、数据依然同步。</p><h3 id="MySQL实战"><a href="#MySQL实战" class="headerlink" title="MySQL实战"></a>MySQL实战</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span></span><br><span class="line">67a1b52b307b59d14029fee48ae553b9334c57037ad001d914e2e87ba96fa6cb</span><br><span class="line"><span class="comment"># -d 后台运行 -p 端口映射 -v 卷挂载 -e 环境配置 -- name 容器名字</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># ls data/</span></span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker rm -f 67a1b52b307b</span></span><br><span class="line">67a1b52b307b</span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># ls data/</span></span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem</span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载方式</span></span><br><span class="line">docker run  -d -P --name xxx -v (str1:)str2 image</span><br><span class="line"><span class="comment"># str1 不加/为具名，加/为主机根目录下地址</span></span><br><span class="line"><span class="comment"># str2 容器内路径</span></span><br><span class="line"><span class="comment"># 匿名挂载：    -v 容器内路径</span></span><br><span class="line"><span class="comment"># 具名挂载：    -v 卷名:容器内路径</span></span><br><span class="line"><span class="comment"># 指定路径挂载: -v /宿主机路径:容器内路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据卷操作</span></span><br><span class="line">docker volume [ options ]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br><span class="line"><span class="comment"># 查看所有的volume的情况</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               33ae588fae6d34f511a769948f0d3d123c9d45c442ac7728cb85599c2657e50d</span><br><span class="line">......</span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># docker volume ls                  </span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               juming-nginx</span><br><span class="line">......</span><br><span class="line"><span class="comment"># 查看详细信息</span></span><br><span class="line">[root@VM-1-14-centos mysql]<span class="comment"># docker volume inspect juming-nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-04-24T19:42:24+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/juming-nginx/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;juming-nginx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxxx/_data</code>下</li><li>如果指定了目录，docker volume ls 是查看不到的</li></ul><blockquote><p>通过具名挂载可以很容易地找到数据卷，因此通常使用具名挂载。</p></blockquote><h3 id="ro-rw"><a href="#ro-rw" class="headerlink" title="ro/rw"></a>ro/rw</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -v 容器内路径:ro/rw 改变读写权限</span></span><br><span class="line">ro <span class="comment">#readonly 只读（只能通过宿主机操作）</span></span><br><span class="line">rw <span class="comment">#readwrite 可读可写</span></span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><h3 id="Dockerfile中设置挂载"><a href="#Dockerfile中设置挂载" class="headerlink" title="Dockerfile中设置挂载"></a>Dockerfile中设置挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># mkdir docker_test</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># cd docker_test/</span></span><br><span class="line">[root@VM-1-14-centos docker_test]<span class="comment"># vim dockerfile1</span></span><br><span class="line">[root@VM-1-14-centos docker_test]<span class="comment"># cat dockerfile1 </span></span><br><span class="line">FROM centos  <span class="comment"># 设置基础镜像</span></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]  <span class="comment"># 设置挂载，新建两个匿名卷</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span> <span class="comment"># 写出内部命令end</span></span><br><span class="line">CMD /bin/bash  <span class="comment"># 进入bin/bash</span></span><br><span class="line">[root@VM-1-14-centos docker_test]<span class="comment"># docker build -f /root/docker_test/dockerfile1 -t nephrencake/centos:1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 40898156bffb</span><br><span class="line">Removing intermediate container 40898156bffb</span><br><span class="line"> ---&gt; f7982a2145cb</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span> </span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> cd21a00b4b6e</span><br><span class="line">Removing intermediate container cd21a00b4b6e</span><br><span class="line"> ---&gt; dc3c858b0b01</span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d6937914df26</span><br><span class="line">Removing intermediate container d6937914df26</span><br><span class="line"> ---&gt; 706bb05073c4</span><br><span class="line">Successfully built 706bb05073c4</span><br><span class="line">Successfully tagged nephrencake/centos:1.0</span><br><span class="line">[root@VM-1-14-centos docker_test]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nephrencake/centos    1.0       706bb05073c4   2 minutes ago   209MB</span><br><span class="line">[root@VM-1-14-centos docker_test]<span class="comment"># docker run -it 706bb05073c4</span></span><br><span class="line">[root@f42ba8b35f43 /]<span class="comment"># ls -l</span></span><br><span class="line">total 56</span><br><span class="line">......</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 24 13:23 volume01  <span class="comment"># 发现设置的挂载数据卷</span></span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 24 13:23 volume02</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker inspect f42ba8b35f43</span></span><br><span class="line">......</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;646d7481a3762934113020b27f86b43c980b3d76bddd15072b327785bc9672fc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/646d7481a3762934113020b27f86b43c980b3d76bddd15072b327785bc9672fc/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;860d1d86119aca1e8f1022c5588542608ce116e0530a758b7ba5e590cc7545ce&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/860d1d86119aca1e8f1022c5588542608ce116e0530a758b7ba5e590cc7545ce/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>docker run xxx 等效于 docker run xxx:latest</p><p>因此 docker run xxx:latest 是找不到 docker run xxx:1.0 的</p></blockquote><h3 id="多容器同步数据卷"><a href="#多容器同步数据卷" class="headerlink" title="多容器同步数据卷"></a>多容器同步数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name container2 --volumes-from container1 image</span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建docker01容器并在挂载数据卷中创建文件</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -it --name docker01 706bb05073c4</span></span><br><span class="line">[root@fc4ad8c3e129 /]<span class="comment"># ls -l</span></span><br><span class="line">total 56</span><br><span class="line">......</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 25 00:22 volume01</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 25 00:22 volume02</span><br><span class="line">[root@fc4ad8c3e129 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@fc4ad8c3e129 volume01]<span class="comment"># touch docker01.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建docker02并查看同步的数据卷</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -it --name docker02 --volumes-from docker01 706bb05073c4</span></span><br><span class="line">[root@1f84a808b9bb /]<span class="comment"># ls -l</span></span><br><span class="line">total 56</span><br><span class="line">......</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 25 00:22 volume01</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 25 00:22 volume02</span><br><span class="line">[root@1f84a808b9bb /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@1f84a808b9bb volume01]<span class="comment"># ls</span></span><br><span class="line">docker01.txt  <span class="comment"># docker01创建的文件在docker02中被同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除docker01并查看docker02的数据仍然存在</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker rm -f docker01</span></span><br><span class="line">docker01</span><br><span class="line">[root@1f84a808b9bb volume01]<span class="comment"># ls</span></span><br><span class="line">docker01.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>container2和container1共享的数据卷<strong>互相共享但双向拷贝</strong>。</p></blockquote><h3 id="多个MySQL数据共享"><a href="#多个MySQL数据共享" class="headerlink" title="多个MySQL数据共享"></a>多个MySQL数据共享</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7</span><br><span class="line"><span class="comment"># -v 设置的挂载路径只需要设置一次，后来的继承即可</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>便于集群建配置的同步共享。</p><p>数据卷的生命周期一直持续到所有容器被消灭为止（高可用）。</p><p>持久化到本地时，即使容器删除，本地数据依然保留。</p>]]></content>
    
    
    <summary type="html">Docker基础Part4</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础Part3</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/</id>
    <published>2021-04-23T08:56:51.000Z</published>
    <updated>2021-06-03T15:10:28.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part3——镜像讲解"><a href="#Docker基础Part3——镜像讲解" class="headerlink" title="Docker基础Part3——镜像讲解"></a>Docker基础Part3——镜像讲解</h1><p>[TOC]</p><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><blockquote><p>docker镜像文件 = (Linux的bootfs) + 基础镜像的rootfs + 镜像本身的依赖 + 镜像本身</p></blockquote><h3 id="UnionFs"><a href="#UnionFs" class="headerlink" title="UnionFs"></a>UnionFs</h3><p>Docker镜像实际上由一层一层的文件系统组成，这种层级的文件系统叫UnionFS。</p><p>UnionFs（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改（增加新的操作环境）作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像。</p><blockquote><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层需要文件系统叠加统合起来（<strong>不同的镜像可能会使用相同的部分层级文件</strong>），最终的文件系统会包含所有需要的底层文件和目录。</p></blockquote><h3 id="bootfs-amp-rootfs"><a href="#bootfs-amp-rootfs" class="headerlink" title="bootfs &amp; rootfs"></a>bootfs &amp; rootfs</h3><p>典型的Linux文件系统由<strong>bootfs</strong>和<strong>rootfs</strong>两部分组成，而 Docker 镜像的最底层就是 Linux 内核。</p><p>bootfs（boot file system）包含 bootloader和 kernel。bootloader主要负责引导加载内核 kernel。这一层与主机的Linux/Unix系统是一样的，用户不会修改这个文件系统 。在启动过程完成后，整个内核 kernel 都会被加载进内存，此时 bootfs 会被 umount 卸载从而释放出所占用的内存。</p><p>rootfs（root file system）在 bootfs之上。包括 /dev、/proc、/bin、/etc、/lib、/usr、/tmp 等再加上要运行用户应用所需要的所有配置文件，二进制文件和库文件。 各个版本的bootfs是一样的，区别就是rootfs。Linux 系统在启动时，rootfs 首先会被挂载为只读模式，然后在启动完成后被修改为读写模式，随后它们就可以被修改了。</p><blockquote><ul><li>所有 Docker 容器都共享主机系统的 bootfs 即 Linux 内核</li><li>每个容器有自己的 rootfs，它来自不同的 Linux 发行版的基础镜像，包括 Ubuntu，Debian 和 SUSE 等</li><li>所有基于一种基础镜像的容器都共享这种 rootfs</li></ul></blockquote><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/20150825141358_122.png" alt="Docker" style="zoom:200%;"><h2 id="Docker分层理解"><a href="#Docker分层理解" class="headerlink" title="Docker分层理解"></a>Docker分层理解</h2><h3 id="分层共享"><a href="#分层共享" class="headerlink" title="分层共享"></a>分层共享</h3><p>Docker镜像采用分层结构最大的好处就是资源共享（镜像的每一层都可以被共享）。当多个镜像具备相同的一层镜像文件，则宿主机只需在磁盘上保留一份镜像文件（相同的镜像文件不会被重复下载），同时内存中也只需要加载一份镜像文件（相同的镜像文件不会被重复加载），就可以为所有的容器服务了。</p><ul><li>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或添加新的内容时，就会在当前镜像层之上，创建新的镜像层。</li></ul><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/image-20210424123316106.png" alt="image-20210424123316106"></p><ul><li>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合。</li></ul><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/image-20210424123442809.png" alt="image-20210424123442809"></p><ul><li>对于版本更新的新文件，在打包合并镜像时会舍弃旧文件。</li></ul><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/image-20210424123755365.png" alt="image-20210424123755365"></p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。</p><h3 id="镜像层-amp-容器层"><a href="#镜像层-amp-容器层" class="headerlink" title="镜像层&amp;容器层"></a>镜像层&amp;容器层</h3><p>Docker 镜像都是只读的，当容器启动时，一个新的可写的容器层加载到镜像层的上方。</p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part3/1265713-20190402151517616-1614953387.png" alt="img" style="zoom: 150%;"><h2 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">&quot;描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器id 镜像名:[TAG]</span><br></pre></td></tr></table></figure><p>demo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、启动一个默认的tomcat</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d -p 8080:8080 tomcat</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it 容器id</span></span><br><span class="line"><span class="comment"># 2、默认的tomcat没有webapps应用，即/usr/local/tomcat/webapps下没有文件</span></span><br><span class="line">root@6043e496a1c0:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ls webapps</span></span><br><span class="line"><span class="comment"># 3、拷贝文件进去</span></span><br><span class="line">root@6043e496a1c0:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cp -r webapps.dist/* webapps</span></span><br><span class="line"><span class="comment"># 4、将操作过的容器通过commit提交为一个镜像</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker commit -a=&quot;NephrenCake&quot; -m=&quot;add webapps app&quot; 6043e496a1c0 tomcat02:1.0</span></span><br><span class="line">sha256:ad23de72c26b7b3fb360fd745734738a2be98043bff43938a7ee0b8d772e7708</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">tomcat02              1.0       ad23de72c26b   19 seconds ago   672MB</span><br><span class="line">tomcat                latest    c0e850d7b9bb   31 hours ago     667MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   5 weeks ago      79.1MB</span><br></pre></td></tr></table></figure><blockquote><p>刚开始学习时，可以对概念理解模糊，但一定要实践。最终通过实践和概念相结合，完全理解知识点。</p></blockquote>]]></content>
    
    
    <summary type="html">Docker基础Part3</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础Part2</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part2/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part2/</id>
    <published>2021-04-20T13:51:20.000Z</published>
    <updated>2021-06-03T15:10:13.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part2——基本命令"><a href="#Docker基础Part2——基本命令" class="headerlink" title="Docker基础Part2——基本命令"></a>Docker基础Part2——基本命令</h1><p>[TOC]</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version  <span class="comment"># 版本信息</span></span><br><span class="line">docker info  <span class="comment"># 系统信息，包括镜像、容器、运行状态、插件</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>帮助文档 <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><blockquote><p>注意这里是镜像，不是容器。</p></blockquote><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    d1165f221234   6 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY：镜像的仓库源</span><br><span class="line">TAG：镜像的标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：镜像创建时间</span><br><span class="line">SIZE：镜像大小</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">  -a, --all             <span class="comment"># 列出所有镜像</span></span><br><span class="line">  -q, --quiet           <span class="comment"># 只显示镜像</span></span><br></pre></td></tr></table></figure><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10777     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4058      [OK]       </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --<span class="built_in">limit</span> int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string"># demo</span></span><br><span class="line"><span class="string">docker search mysql --filter=STARS=3000  # 只显示stars&gt;=3k的</span></span><br></pre></td></tr></table></figure><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest  <span class="comment"># 不指定tag则默认latest</span></span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Pull complete  <span class="comment"># 分层下载是docker的核心，联合文件系统</span></span><br><span class="line">9444bb562699: Pull complete </span><br><span class="line">6a4207b96940: Pull complete </span><br><span class="line">181cefd361ce: Pull complete </span><br><span class="line">8a2090759d8a: Pull complete </span><br><span class="line">15f235e0d7ee: Pull complete </span><br><span class="line">d870539cd9db: Pull complete </span><br><span class="line">493aaa84617a: Pull complete </span><br><span class="line">bfc0e534fc78: Pull complete </span><br><span class="line">fae20d253f9d: Pull complete </span><br><span class="line">9350664305b3: Pull complete </span><br><span class="line">e47da95a5aab: Pull complete </span><br><span class="line">Digest: sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a  <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  <span class="comment"># 真实地址 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两者等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本下载(一定要来源于官方支持的版本)</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Already exists  <span class="comment"># 已存在的部分分层文件可以共用，不需要重复下载</span></span><br><span class="line">9444bb562699: Already exists </span><br><span class="line">6a4207b96940: Already exists </span><br><span class="line">181cefd361ce: Already exists </span><br><span class="line">8a2090759d8a: Already exists </span><br><span class="line">15f235e0d7ee: Already exists </span><br><span class="line">d870539cd9db: Already exists </span><br><span class="line">cb7af63cbefa: Pull complete  <span class="comment"># 只需要更新不同的文件</span></span><br><span class="line">151f1721bdbf: Pull complete </span><br><span class="line">fcd19c3dd488: Pull complete </span><br><span class="line">415af2aa5ddc: Pull complete </span><br><span class="line">Digest: sha256:a655529fdfcbaf0ef28984d68a3e21778e061c886ff458b677391924f62fb457</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">  -a, --all-tags                Download all tagged images <span class="keyword">in</span> the repository</span><br><span class="line">      --disable-content-trust   Skip image verification (default <span class="literal">true</span>)</span><br><span class="line">      --platform string         Set platform <span class="keyword">if</span> server is multi-platform capable</span><br><span class="line">  -q, --quiet                   Suppress verbose output</span><br></pre></td></tr></table></figure><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker rmi -f 87eca374c0ed</span></span><br><span class="line">Untagged: mysql:5.7</span><br><span class="line">Untagged: mysql@sha256:a655529fdfcbaf0ef28984d68a3e21778e061c886ff458b677391924f62fb457</span><br><span class="line">Deleted: sha256:87eca374c0ed97f0f0b504174b0d22b0a0add454414c0dbf5ae43870369f6854  <span class="comment"># 只删除了5.7部分</span></span><br><span class="line">Deleted: sha256:3b035442a2f8d52d6c5c2d83a18c6c21a89b4dc6c89b481bcf40df89087655ce</span><br><span class="line">Deleted: sha256:a223f1762b2c619a59b81fc2304bf4c9b791c777c8bdb19760c09cbd1f061efc</span><br><span class="line">Deleted: sha256:92402939b3fd03bee3745eb90df9799bcb7d0ef92ca8ecf7ef37ad9c8a550084</span><br><span class="line">Deleted: sha256:028b21e33aa4cd9c88acdd194d5cbef25638ffbca8669bfc0da72ad1eb148997</span><br><span class="line"></span><br><span class="line"><span class="comment"># rmi中i表示image</span></span><br><span class="line"><span class="comment"># -f全部删除</span></span><br><span class="line"><span class="comment"># 可以通过镜像的名字或者id删</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个/所有镜像</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker rmi -f $(docker images -aq)</span></span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run [ option ] image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-name=<span class="string">&quot;Name&quot;</span>  <span class="comment"># 容器名字</span></span><br><span class="line">-d            <span class="comment"># 后台方式运行</span></span><br><span class="line">-it           <span class="comment"># 使用交互方式运行，进入容器查看内容</span></span><br><span class="line">-p            <span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口  <span class="comment"># 常用，将主机端口映射到容器端口</span></span><br><span class="line">    -p 容器端口  <span class="comment"># 内部使用</span></span><br><span class="line">    容器端口</span><br><span class="line">-P            <span class="comment"># 随机指定端口</span></span><br></pre></td></tr></table></figure><blockquote><p>每次run都是新建一个容器！</p></blockquote><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 linux 上下载 centos 镜像，启动并进入容器</span></span><br><span class="line"><span class="comment"># 使用 /bin/bash 或 /bin/sh 启用控制台命令交互</span></span><br><span class="line"><span class="comment"># 此处主机名 33a022c1918a 就是容器id</span></span><br><span class="line"><span class="comment"># 此时这个容器内部就是一个centos系统，但是很多地方不完善</span></span><br><span class="line"><span class="comment"># exit退出镜像回到主机</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker pull centos</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@33a022c1918a /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@33a022c1918a /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># ls /</span></span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps [ options ]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             <span class="comment"># 列出当前正在运行(默认)+历史运行过的容器</span></span><br><span class="line">  -n, --last int        <span class="comment"># 最近n个创建过的容器</span></span><br><span class="line">  -q, --quiet           <span class="comment"># 只显示id</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps -all</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">33a022c1918a   centos    <span class="string">&quot;/bin/bash&quot;</span>   13 minutes ago   Exited (127) 9 minutes ago             nostalgic_hermann</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">33a022c1918a   centos         <span class="string">&quot;/bin/bash&quot;</span>   14 minutes ago   Exited (127) 9 minutes ago             nostalgic_hermann</span><br><span class="line">d036353864f6   d1165f221234   <span class="string">&quot;/hello&quot;</span>      2 days ago       Exited (0) 2 days ago                  cranky_nash</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps -aq</span></span><br><span class="line">33a022c1918a</span><br><span class="line">d036353864f6</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>  <span class="comment"># 退出并停止容器运行</span></span><br><span class="line">ctrl+P+Q  <span class="comment"># 退出但不停止</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id  <span class="comment"># 删除指定的容器，不能删除正在运行的容器，除非 rm -f</span></span><br><span class="line">docker rm -f $(docker ps -aq)  <span class="comment"># 删除所有容器</span></span><br><span class="line">docker ps -aq | xargs docker rm  <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></table></figure><h3 id="启动-停止容器"><a href="#启动-停止容器" class="headerlink" title="启动/停止容器"></a>启动/停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id  <span class="comment"># 启动</span></span><br><span class="line">docker restart 容器id  <span class="comment"># 重启</span></span><br><span class="line">docker stop 容器id  <span class="comment"># 停止</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id  <span class="comment"># 强制停止</span></span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d 镜像</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d centos</span></span><br><span class="line">9dfce832258f344250b3ad0ddaed6e55a9e4ae711a558bb5083dcf9162dd551b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然创建了容器后台运行，但是没有检测到前台应用进程，所以自动停止了。</span></span><br><span class="line"><span class="comment"># 例如：Nginx容器启动之后，发现自己没有提供服务，就立刻停止</span></span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default <span class="string">&quot;all&quot;</span>)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker run -d centos /bin/bash -c &quot;while true;do echo NephrenCake;sleep 1;done&quot;</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">813d27116121   centos    <span class="string">&quot;/bin/bash -c &#x27;while…&quot;</span>   7 minutes ago   Up 7 minutes             peaceful_gag</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker logs -f -t --tail 5 813d27116121</span></span><br><span class="line">2021-04-23T06:18:08.137574755Z NephrenCake</span><br><span class="line">......  <span class="comment"># ctrl + c 退出</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker stop 813d27116121</span></span><br></pre></td></tr></table></figure><h3 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 进程id</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker restart 813d27116121</span></span><br><span class="line">813d27116121</span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker logs -ft --tail 5 813d27116121</span></span><br><span class="line">2021-04-23T06:38:02.133138721Z NephrenCake</span><br><span class="line">......  <span class="comment"># restart重新启动，依然执行之前的命令</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker top 813d27116121</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                11818               11796               0                   14:38               ?                   00:00:00            /bin/bash -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> NephrenCake;sleep 1;<span class="keyword">done</span></span><br><span class="line">root                11935               11818               0                   14:38               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure><h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [ options ] 容器id</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes <span class="keyword">if</span> the <span class="built_in">type</span> is container</span><br><span class="line">      --<span class="built_in">type</span> string     Return JSON <span class="keyword">for</span> specified <span class="built_in">type</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器的元数据================================================================================================</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker inspect 813d27116121</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38&quot;</span>,  <span class="comment"># 使用的id只是全id的缩写</span></span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-04-23T06:09:40.625524708Z&quot;</span>,  <span class="comment"># 创建时间</span></span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/bin/bash&quot;</span>,  <span class="comment"># 控制台目录</span></span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [  <span class="comment"># 传递的参数</span></span><br><span class="line">            <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;while true;do echo NephrenCake;sleep 1;done&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 11818,  <span class="comment"># 父进程id</span></span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2021-04-23T06:38:02.136315705Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;2021-04-23T06:23:18.602040203Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;</span>,  <span class="comment"># 镜像源</span></span><br><span class="line">        <span class="string">&quot;ResolvConfPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38/resolv.conf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostnamePath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38/hostname&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostsPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38/hosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LogPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38/813d2711612126bdc63c81b30d29f11894f4d51a179749e33b1500e917b56b38-json.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;/peaceful_gagarin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RestartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Platform&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MountLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ProcessLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;AppArmorProfile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ExecIDs&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;HostConfig&quot;</span>: &#123;  <span class="comment"># 主机配置</span></span><br><span class="line">            <span class="string">&quot;Binds&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;ContainerIDFile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LogConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Config&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;NetworkMode&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PortBindings&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MaximumRetryCount&quot;</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;AutoRemove&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;VolumeDriver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VolumesFrom&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapDrop&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CgroupnsMode&quot;</span>: <span class="string">&quot;host&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Dns&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsOptions&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsSearch&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;ExtraHosts&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;GroupAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IpcMode&quot;</span>: <span class="string">&quot;private&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cgroup&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomScoreAdj&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;PidMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Privileged&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PublishAllPorts&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ReadonlyRootfs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;SecurityOpt&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;UTSMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UsernsMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ShmSize&quot;</span>: 67108864,</span><br><span class="line">            <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;runc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConsoleSize&quot;</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Isolation&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpuShares&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Memory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;NanoCpus&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CgroupParent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BlkioWeight&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;BlkioWeightDevice&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuPeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuQuota&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimePeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimeRuntime&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpusetCpus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpusetMems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Devices&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DeviceCgroupRules&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;DeviceRequests&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;KernelMemory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;KernelMemoryTCP&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemoryReservation&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwap&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwappiness&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomKillDisable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PidsLimit&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Ulimits&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuCount&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuPercent&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumIOps&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumBandwidth&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MaskedPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/asound&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/acpi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/kcore&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/keys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/latency_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_list&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sched_debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/scsi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/sys/firmware&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ReadonlyPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/bus&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/fs&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/irq&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/b6d0d37faec7c071970c4880b019ff1d55f117ef18406c988b813f302bb227d0-init/diff:/var/lib/docker/overlay2/e7f999e147eaa9cc6658059fe0a66e6f6bca79957c99cf69bfe563b82bcbd2be/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/b6d0d37faec7c071970c4880b019ff1d55f117ef18406c988b813f302bb227d0/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/b6d0d37faec7c071970c4880b019ff1d55f117ef18406c988b813f302bb227d0/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/b6d0d37faec7c071970c4880b019ff1d55f117ef18406c988b813f302bb227d0/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [  <span class="comment"># 挂载</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/volume&quot;</span>,  <span class="comment"># 主机内目录</span></span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/home&quot;</span>,  <span class="comment"># 容器内目录，目标地址</span></span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;813d27116121&quot;</span>,  <span class="comment"># 容器名</span></span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [  <span class="comment"># 环境变量</span></span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [  <span class="comment"># command命令行命令</span></span><br><span class="line">                <span class="string">&quot;/bin/bash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;while true;do echo NephrenCake;sleep 1;done&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;centos&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20201204&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;NetworkSettings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Bridge&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxID&quot;</span>: <span class="string">&quot;a58ab6299e5a5cb4b40068484267752f8958795d9073e2bf70ad47478cfd76e3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HairpinMode&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Ports&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;SandboxKey&quot;</span>: <span class="string">&quot;/var/run/docker/netns/a58ab6299e5a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;SecondaryIPv6Addresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;8b66ea3b5e36bc2599ef8f9f8423036daec31b9df332ba6a9a6924125c3770d9&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.18.0.3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:03&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;  <span class="comment"># docker网络</span></span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;  <span class="comment"># 桥接网卡</span></span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;c49bd3c9074eccb131f580ae87a0f639459d8fbfb6106ff16d95de982f955cb6&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;8b66ea3b5e36bc2599ef8f9f8423036daec31b9df332ba6a9a6924125c3770d9&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.18.0.3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:03&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像的元数据================================================================================================</span></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker image inspect centos</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;centos:latest&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;RepoDigests&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;centos@sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comment&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-12-08T00:22:53.076477777Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Container&quot;</span>: <span class="string">&quot;395e0bfa7301f73bc994efe15099ea56b8836c608dd32614ac5ae279976d33e4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ContainerConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;395e0bfa7301&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#(nop) &quot;</span>,</span><br><span class="line">                <span class="string">&quot;CMD [\&quot;/bin/bash\&quot;]&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:6de05bdfbf9a9d403458d10de9e088b6d93d971dd5d48d18b4b6758f4554f451&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20201204&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;DockerVersion&quot;</span>: <span class="string">&quot;19.03.12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:6de05bdfbf9a9d403458d10de9e088b6d93d971dd5d48d18b4b6758f4554f451&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20201204&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Architecture&quot;</span>: <span class="string">&quot;amd64&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Size&quot;</span>: 209348104,</span><br><span class="line">        <span class="string">&quot;VirtualSize&quot;</span>: 209348104,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/e7f999e147eaa9cc6658059fe0a66e6f6bca79957c99cf69bfe563b82bcbd2be/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/e7f999e147eaa9cc6658059fe0a66e6f6bca79957c99cf69bfe563b82bcbd2be/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/e7f999e147eaa9cc6658059fe0a66e6f6bca79957c99cf69bfe563b82bcbd2be/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;RootFS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;layers&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Layers&quot;</span>: [  <span class="comment"># 分层</span></span><br><span class="line">                <span class="string">&quot;sha256:2653d992f4ef2bfd27f94db643815aa567240c37732cae1405ad1c1309ee9859&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;LastTagTime&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h3><ul><li>方法1：execute</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash  <span class="comment"># 根据id重新进入容器交互，交互的command为/bin/bash</span></span><br><span class="line"></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker exec -it 813d27116121 /bin/bash</span></span><br><span class="line">[root@813d27116121 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>方法2：attach</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器id  <span class="comment"># 根据id重新进入容器交互，交互的command为之前设置的内容</span></span><br><span class="line"></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker attach 813d27116121</span></span><br><span class="line">NephrenCake</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="从容器拷贝文件到主机"><a href="#从容器拷贝文件到主机" class="headerlink" title="从容器拷贝文件到主机"></a>从容器拷贝文件到主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机的路径</span><br><span class="line"></span><br><span class="line">[root@VM-1-14-centos ~]<span class="comment"># docker cp 813d27116121:/home/test.java /home</span></span><br></pre></td></tr></table></figure><blockquote><p>这里拷贝是一个手动的过程，后面使用卷技术可以实现自动同步。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part2/image-20210423164827183.png" alt="image-20210423164827183"></p><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=14">部署Nginx、Tomcat、ES+Kibana</a></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网9000，外网8080</span></span><br><span class="line"><span class="comment"># --restart=always 启动方式</span></span><br><span class="line"><span class="comment"># -v 将数据挂载到本机</span></span><br><span class="line"><span class="comment"># --privileged=true 授权</span></span><br><span class="line"><span class="comment"># portainer/portainer 安装控制面板</span></span><br></pre></td></tr></table></figure><ul><li>Rancher</li></ul><p>在 持续集成/持续部署(CI/CD) 时使用。</p>]]></content>
    
    
    <summary type="html">Docker基础Part2</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础Part1</title>
    <link href="https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/"/>
    <id>https://nephrencake.gitee.io/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/</id>
    <published>2021-04-20T11:15:07.000Z</published>
    <updated>2021-06-03T15:09:06.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础Part1——概述"><a href="#Docker基础Part1——概述" class="headerlink" title="Docker基础Part1——概述"></a>Docker基础Part1——概述</h1><p>[TOC]</p><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker 是一个开源的应用容器引擎，基于Go 语言。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，将应用程序与基础架构分开，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h2 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h2><h3 id="快速，一致地交付应用程序"><a href="#快速，一致地交付应用程序" class="headerlink" title="快速，一致地交付应用程序"></a>快速，一致地交付应用程序</h3><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，能够快速交付软件，测试和部署代码，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p><ul><li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li><li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li><li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li><li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li></ul><h3 id="响应式部署和扩展"><a href="#响应式部署和扩展" class="headerlink" title="响应式部署和扩展"></a>响应式部署和扩展</h3><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><h3 id="在同一硬件上运行更多工作负载"><a href="#在同一硬件上运行更多工作负载" class="headerlink" title="在同一硬件上运行更多工作负载"></a>在同一硬件上运行更多工作负载</h3><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><ul><li><strong>镜像（Image）</strong>：Docker 镜像，就相当于是面向对象中静态定义的类class。</li><li><strong>容器（Container）</strong>：Docker 容器（Container），就相当于是面向对象中class的实例对象，是镜像运行时的实体，可以同时运行一个或多个。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像（官方默认是DockerHub）。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</li><li>**客户端 (Client) **：Docker 客户端通过命令行或者其他工具使用 Docker SDK 与 Docker 的守护进程通信。</li><li>**Docker 主机 (Host) **：一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</li><li>**Docker Machine **：Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</li></ul><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/image-20210420204117374.png" alt="image-20210420204117374"></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-1-14-centos /]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1127.19.1.el7.x86_64</span><br><span class="line">[root@VM-1-14-centos /]<span class="comment"># cat /etc/os-release </span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>建议阅读官方文档 <a href="https://docs.docker.com/">https://docs.docker.com/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.卸载旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="comment"># 2.依赖包</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置yum源为阿里云</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.更新软件索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.安装docker</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.测试安装成功</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.启动镜像</span></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h2><h3 id="登录阿里云"><a href="#登录阿里云" class="headerlink" title="登录阿里云"></a>登录阿里云</h3><p>阿里云 -&gt; 注册/登录 -&gt; 控制台 -&gt; 左上角:产品与服务 -&gt; 容器镜像服务 -&gt; 镜像中心:镜像加速器</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.第一次安装好docker的话，/etc目录下是没有docker目录的， 所以先创建docker目录：</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建并编写配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://0uvt67mi.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.重启docker</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="hello-world-简单原理"><a href="#hello-world-简单原理" class="headerlink" title="hello world 简单原理"></a>hello world 简单原理</h2><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/image-20210420215218606.png" alt="image-20210420215218606"></p><h3 id="更少的虚拟层"><a href="#更少的虚拟层" class="headerlink" title="更少的虚拟层"></a>更少的虚拟层</h3><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/image-20210420222126606.png" alt="image-20210420222126606"></p><h3 id="不同虚拟化的区别"><a href="#不同虚拟化的区别" class="headerlink" title="不同虚拟化的区别"></a>不同虚拟化的区别</h3><p><img src="/2021/04/Docker%E5%9F%BA%E7%A1%80Part1/image-20210420222213286.png" alt="image-20210420222213286"></p>]]></content>
    
    
    <summary type="html">Docker基础Part1</summary>
    
    
    
    <category term="Docker基础" scheme="https://nephrencake.gitee.io/categories/Docker%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
